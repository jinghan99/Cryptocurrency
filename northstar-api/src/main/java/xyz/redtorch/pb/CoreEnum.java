// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xyz/redtorch/pb/core_enum.proto

package xyz.redtorch.pb;

public final class CoreEnum {
  private CoreEnum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * 策略引擎类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.StrategyEngineTypeEnum}
   */
  public enum StrategyEngineTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SET_Treading = 0;</code>
     */
    SET_Treading(0),
    /**
     * <code>SET_Backtesting = 1;</code>
     */
    SET_Backtesting(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SET_Treading = 0;</code>
     */
    public static final int SET_Treading_VALUE = 0;
    /**
     * <code>SET_Backtesting = 1;</code>
     */
    public static final int SET_Backtesting_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StrategyEngineTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static StrategyEngineTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return SET_Treading;
        case 1: return SET_Backtesting;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StrategyEngineTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StrategyEngineTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StrategyEngineTypeEnum>() {
            public StrategyEngineTypeEnum findValueByNumber(int number) {
              return StrategyEngineTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final StrategyEngineTypeEnum[] VALUES = values();

    public static StrategyEngineTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StrategyEngineTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.StrategyEngineTypeEnum)
  }

  /**
   * <pre>
   * 网关类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.GatewayTypeEnum}
   */
  public enum GatewayTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 交易和行情数据
     * </pre>
     *
     * <code>GTE_TradeAndMarketData = 0;</code>
     */
    GTE_TradeAndMarketData(0),
    /**
     * <pre>
     * 行情数据
     * </pre>
     *
     * <code>GTE_MarketData = 1;</code>
     */
    GTE_MarketData(1),
    /**
     * <pre>
     * 交易
     * </pre>
     *
     * <code>GTE_Trade = 2;</code>
     */
    GTE_Trade(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 交易和行情数据
     * </pre>
     *
     * <code>GTE_TradeAndMarketData = 0;</code>
     */
    public static final int GTE_TradeAndMarketData_VALUE = 0;
    /**
     * <pre>
     * 行情数据
     * </pre>
     *
     * <code>GTE_MarketData = 1;</code>
     */
    public static final int GTE_MarketData_VALUE = 1;
    /**
     * <pre>
     * 交易
     * </pre>
     *
     * <code>GTE_Trade = 2;</code>
     */
    public static final int GTE_Trade_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GatewayTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GatewayTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return GTE_TradeAndMarketData;
        case 1: return GTE_MarketData;
        case 2: return GTE_Trade;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GatewayTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GatewayTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GatewayTypeEnum>() {
            public GatewayTypeEnum findValueByNumber(int number) {
              return GatewayTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(1);
    }

    private static final GatewayTypeEnum[] VALUES = values();

    public static GatewayTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GatewayTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.GatewayTypeEnum)
  }

  /**
   * <pre>
   * 网关适配器类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.GatewayAdapterTypeEnum}
   */
  public enum GatewayAdapterTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * CTP
     * </pre>
     *
     * <code>GAT_CTP = 0;</code>
     */
    GAT_CTP(0),
    /**
     * <pre>
     * IB
     * </pre>
     *
     * <code>GAT_IB = 1;</code>
     */
    GAT_IB(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * CTP
     * </pre>
     *
     * <code>GAT_CTP = 0;</code>
     */
    public static final int GAT_CTP_VALUE = 0;
    /**
     * <pre>
     * IB
     * </pre>
     *
     * <code>GAT_IB = 1;</code>
     */
    public static final int GAT_IB_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GatewayAdapterTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GatewayAdapterTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return GAT_CTP;
        case 1: return GAT_IB;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GatewayAdapterTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GatewayAdapterTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GatewayAdapterTypeEnum>() {
            public GatewayAdapterTypeEnum findValueByNumber(int number) {
              return GatewayAdapterTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(2);
    }

    private static final GatewayAdapterTypeEnum[] VALUES = values();

    public static GatewayAdapterTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GatewayAdapterTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.GatewayAdapterTypeEnum)
  }

  /**
   * <pre>
   * 通用状态
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.CommonStatusEnum}
   */
  public enum CommonStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 成功
     * </pre>
     *
     * <code>COMS_SUCCESS = 0;</code>
     */
    COMS_SUCCESS(0),
    /**
     * <pre>
     * 信息
     * </pre>
     *
     * <code>COMS_INFO = 1;</code>
     */
    COMS_INFO(1),
    /**
     * <pre>
     * 警告
     * </pre>
     *
     * <code>COMS_WARN = 2;</code>
     */
    COMS_WARN(2),
    /**
     * <pre>
     * 错误
     * </pre>
     *
     * <code>COMS_ERROR = 3;</code>
     */
    COMS_ERROR(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 成功
     * </pre>
     *
     * <code>COMS_SUCCESS = 0;</code>
     */
    public static final int COMS_SUCCESS_VALUE = 0;
    /**
     * <pre>
     * 信息
     * </pre>
     *
     * <code>COMS_INFO = 1;</code>
     */
    public static final int COMS_INFO_VALUE = 1;
    /**
     * <pre>
     * 警告
     * </pre>
     *
     * <code>COMS_WARN = 2;</code>
     */
    public static final int COMS_WARN_VALUE = 2;
    /**
     * <pre>
     * 错误
     * </pre>
     *
     * <code>COMS_ERROR = 3;</code>
     */
    public static final int COMS_ERROR_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CommonStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CommonStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return COMS_SUCCESS;
        case 1: return COMS_INFO;
        case 2: return COMS_WARN;
        case 3: return COMS_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CommonStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CommonStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CommonStatusEnum>() {
            public CommonStatusEnum findValueByNumber(int number) {
              return CommonStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(3);
    }

    private static final CommonStatusEnum[] VALUES = values();

    public static CommonStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CommonStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.CommonStatusEnum)
  }

  /**
   * Protobuf enum {@code xyz.redtorch.pb.LogLevelEnum}
   */
  public enum LogLevelEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LL_All = 0;</code>
     */
    LL_All(0),
    /**
     * <code>LL_Error = 40000;</code>
     */
    LL_Error(40000),
    /**
     * <code>LL_Warn = 30000;</code>
     */
    LL_Warn(30000),
    /**
     * <code>LL_Info = 20000;</code>
     */
    LL_Info(20000),
    /**
     * <code>LL_Debug = 10000;</code>
     */
    LL_Debug(10000),
    /**
     * <code>LL_Trace = 5000;</code>
     */
    LL_Trace(5000),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>LL_All = 0;</code>
     */
    public static final int LL_All_VALUE = 0;
    /**
     * <code>LL_Error = 40000;</code>
     */
    public static final int LL_Error_VALUE = 40000;
    /**
     * <code>LL_Warn = 30000;</code>
     */
    public static final int LL_Warn_VALUE = 30000;
    /**
     * <code>LL_Info = 20000;</code>
     */
    public static final int LL_Info_VALUE = 20000;
    /**
     * <code>LL_Debug = 10000;</code>
     */
    public static final int LL_Debug_VALUE = 10000;
    /**
     * <code>LL_Trace = 5000;</code>
     */
    public static final int LL_Trace_VALUE = 5000;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LogLevelEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static LogLevelEnum forNumber(int value) {
      switch (value) {
        case 0: return LL_All;
        case 40000: return LL_Error;
        case 30000: return LL_Warn;
        case 20000: return LL_Info;
        case 10000: return LL_Debug;
        case 5000: return LL_Trace;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LogLevelEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        LogLevelEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LogLevelEnum>() {
            public LogLevelEnum findValueByNumber(int number) {
              return LogLevelEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(4);
    }

    private static final LogLevelEnum[] VALUES = values();

    public static LogLevelEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private LogLevelEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.LogLevelEnum)
  }

  /**
   * <pre>
   * 行情数据库类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.MarketDataDBTypeEnum}
   */
  public enum MarketDataDBTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MDDT_MIX = 0;</code>
     */
    MDDT_MIX(0),
    /**
     * <code>MDDT_TD = 1;</code>
     */
    MDDT_TD(1),
    /**
     * <code>MDDT_HIST = 2;</code>
     */
    MDDT_HIST(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>MDDT_MIX = 0;</code>
     */
    public static final int MDDT_MIX_VALUE = 0;
    /**
     * <code>MDDT_TD = 1;</code>
     */
    public static final int MDDT_TD_VALUE = 1;
    /**
     * <code>MDDT_HIST = 2;</code>
     */
    public static final int MDDT_HIST_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MarketDataDBTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static MarketDataDBTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return MDDT_MIX;
        case 1: return MDDT_TD;
        case 2: return MDDT_HIST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MarketDataDBTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MarketDataDBTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MarketDataDBTypeEnum>() {
            public MarketDataDBTypeEnum findValueByNumber(int number) {
              return MarketDataDBTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(5);
    }

    private static final MarketDataDBTypeEnum[] VALUES = values();

    public static MarketDataDBTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MarketDataDBTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.MarketDataDBTypeEnum)
  }

  /**
   * <pre>
   * Bar周期
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.BarCycleEnum}
   */
  public enum BarCycleEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>B_5Sec = 0;</code>
     */
    B_5Sec(0),
    /**
     * <code>B_1Min = 1;</code>
     */
    B_1Min(1),
    /**
     * <code>B_3Min = 2;</code>
     */
    B_3Min(2),
    /**
     * <code>B_5Min = 3;</code>
     */
    B_5Min(3),
    /**
     * <code>B_15Min = 4;</code>
     */
    B_15Min(4),
    /**
     * <code>B_1Day = 5;</code>
     */
    B_1Day(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>B_5Sec = 0;</code>
     */
    public static final int B_5Sec_VALUE = 0;
    /**
     * <code>B_1Min = 1;</code>
     */
    public static final int B_1Min_VALUE = 1;
    /**
     * <code>B_3Min = 2;</code>
     */
    public static final int B_3Min_VALUE = 2;
    /**
     * <code>B_5Min = 3;</code>
     */
    public static final int B_5Min_VALUE = 3;
    /**
     * <code>B_15Min = 4;</code>
     */
    public static final int B_15Min_VALUE = 4;
    /**
     * <code>B_1Day = 5;</code>
     */
    public static final int B_1Day_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BarCycleEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BarCycleEnum forNumber(int value) {
      switch (value) {
        case 0: return B_5Sec;
        case 1: return B_1Min;
        case 2: return B_3Min;
        case 3: return B_5Min;
        case 4: return B_15Min;
        case 5: return B_1Day;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BarCycleEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BarCycleEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BarCycleEnum>() {
            public BarCycleEnum findValueByNumber(int number) {
              return BarCycleEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(6);
    }

    private static final BarCycleEnum[] VALUES = values();

    public static BarCycleEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BarCycleEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.BarCycleEnum)
  }

  /**
   * <pre>
   * 连接状态
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ConnectStatusEnum}
   */
  public enum ConnectStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>CS_Unknown = 0;</code>
     */
    CS_Unknown(0),
    /**
     * <pre>
     * 已经断开
     * </pre>
     *
     * <code>CS_Disconnected = 1;</code>
     */
    CS_Disconnected(1),
    /**
     * <pre>
     * 已经连接
     * </pre>
     *
     * <code>CS_Connected = 2;</code>
     */
    CS_Connected(2),
    /**
     * <pre>
     * 断开中
     * </pre>
     *
     * <code>CS_Disconnecting = 3;</code>
     */
    CS_Disconnecting(3),
    /**
     * <pre>
     * 连接中
     * </pre>
     *
     * <code>CS_Connecting = 4;</code>
     */
    CS_Connecting(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>CS_Unknown = 0;</code>
     */
    public static final int CS_Unknown_VALUE = 0;
    /**
     * <pre>
     * 已经断开
     * </pre>
     *
     * <code>CS_Disconnected = 1;</code>
     */
    public static final int CS_Disconnected_VALUE = 1;
    /**
     * <pre>
     * 已经连接
     * </pre>
     *
     * <code>CS_Connected = 2;</code>
     */
    public static final int CS_Connected_VALUE = 2;
    /**
     * <pre>
     * 断开中
     * </pre>
     *
     * <code>CS_Disconnecting = 3;</code>
     */
    public static final int CS_Disconnecting_VALUE = 3;
    /**
     * <pre>
     * 连接中
     * </pre>
     *
     * <code>CS_Connecting = 4;</code>
     */
    public static final int CS_Connecting_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConnectStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ConnectStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return CS_Unknown;
        case 1: return CS_Disconnected;
        case 2: return CS_Connected;
        case 3: return CS_Disconnecting;
        case 4: return CS_Connecting;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConnectStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConnectStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConnectStatusEnum>() {
            public ConnectStatusEnum findValueByNumber(int number) {
              return ConnectStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(7);
    }

    private static final ConnectStatusEnum[] VALUES = values();

    public static ConnectStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConnectStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ConnectStatusEnum)
  }

  /**
   * <pre>
   * OrderActionStatusEnum是一个报单操作状态类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderActionStatusTyp}
   */
  public enum OrderActionStatusTyp
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OAS_Unknown = 0;</code>
     */
    OAS_Unknown(0),
    /**
     * <pre>
     * 已经提交
     * </pre>
     *
     * <code>OAS_Submitted = 1;</code>
     */
    OAS_Submitted(1),
    /**
     * <pre>
     * 已经接受
     * </pre>
     *
     * <code>OAS_Accepted = 2;</code>
     */
    OAS_Accepted(2),
    /**
     * <pre>
     * 已经被拒绝
     * </pre>
     *
     * <code>OAS_Rejected = 3;</code>
     */
    OAS_Rejected(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OAS_Unknown = 0;</code>
     */
    public static final int OAS_Unknown_VALUE = 0;
    /**
     * <pre>
     * 已经提交
     * </pre>
     *
     * <code>OAS_Submitted = 1;</code>
     */
    public static final int OAS_Submitted_VALUE = 1;
    /**
     * <pre>
     * 已经接受
     * </pre>
     *
     * <code>OAS_Accepted = 2;</code>
     */
    public static final int OAS_Accepted_VALUE = 2;
    /**
     * <pre>
     * 已经被拒绝
     * </pre>
     *
     * <code>OAS_Rejected = 3;</code>
     */
    public static final int OAS_Rejected_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderActionStatusTyp valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderActionStatusTyp forNumber(int value) {
      switch (value) {
        case 0: return OAS_Unknown;
        case 1: return OAS_Submitted;
        case 2: return OAS_Accepted;
        case 3: return OAS_Rejected;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderActionStatusTyp>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderActionStatusTyp> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderActionStatusTyp>() {
            public OrderActionStatusTyp findValueByNumber(int number) {
              return OrderActionStatusTyp.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(8);
    }

    private static final OrderActionStatusTyp[] VALUES = values();

    public static OrderActionStatusTyp valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderActionStatusTyp(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderActionStatusTyp)
  }

  /**
   * <pre>
   * OrderStatusEnum是一个报单状态类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderStatusEnum}
   */
  public enum OrderStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OS_Unknown = 0;</code>
     */
    OS_Unknown(0),
    /**
     * <pre>
     * 全部成交
     * </pre>
     *
     * <code>OS_AllTraded = 1;</code>
     */
    OS_AllTraded(1),
    /**
     * <pre>
     * 部分成交还在队列中
     * </pre>
     *
     * <code>OS_PartTradedQueueing = 2;</code>
     */
    OS_PartTradedQueueing(2),
    /**
     * <pre>
     * 部分成交不在队列中
     * </pre>
     *
     * <code>OS_PartTradedNotQueueing = 3;</code>
     */
    OS_PartTradedNotQueueing(3),
    /**
     * <pre>
     * 未成交还在队列中
     * </pre>
     *
     * <code>OS_NoTradeQueueing = 4;</code>
     */
    OS_NoTradeQueueing(4),
    /**
     * <pre>
     * 未成交不在队列中
     * </pre>
     *
     * <code>OS_NoTradeNotQueueing = 5;</code>
     */
    OS_NoTradeNotQueueing(5),
    /**
     * <pre>
     * 撤单
     * </pre>
     *
     * <code>OS_Canceled = 6;</code>
     */
    OS_Canceled(6),
    /**
     * <pre>
     * 尚未触发
     * </pre>
     *
     * <code>OS_NotTouched = 7;</code>
     */
    OS_NotTouched(7),
    /**
     * <pre>
     * 已触发
     * </pre>
     *
     * <code>OS_Touched = 8;</code>
     */
    OS_Touched(8),
    /**
     * <pre>
     * 已拒绝
     * </pre>
     *
     * <code>OS_Rejected = 9;</code>
     */
    OS_Rejected(9),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OS_Unknown = 0;</code>
     */
    public static final int OS_Unknown_VALUE = 0;
    /**
     * <pre>
     * 全部成交
     * </pre>
     *
     * <code>OS_AllTraded = 1;</code>
     */
    public static final int OS_AllTraded_VALUE = 1;
    /**
     * <pre>
     * 部分成交还在队列中
     * </pre>
     *
     * <code>OS_PartTradedQueueing = 2;</code>
     */
    public static final int OS_PartTradedQueueing_VALUE = 2;
    /**
     * <pre>
     * 部分成交不在队列中
     * </pre>
     *
     * <code>OS_PartTradedNotQueueing = 3;</code>
     */
    public static final int OS_PartTradedNotQueueing_VALUE = 3;
    /**
     * <pre>
     * 未成交还在队列中
     * </pre>
     *
     * <code>OS_NoTradeQueueing = 4;</code>
     */
    public static final int OS_NoTradeQueueing_VALUE = 4;
    /**
     * <pre>
     * 未成交不在队列中
     * </pre>
     *
     * <code>OS_NoTradeNotQueueing = 5;</code>
     */
    public static final int OS_NoTradeNotQueueing_VALUE = 5;
    /**
     * <pre>
     * 撤单
     * </pre>
     *
     * <code>OS_Canceled = 6;</code>
     */
    public static final int OS_Canceled_VALUE = 6;
    /**
     * <pre>
     * 尚未触发
     * </pre>
     *
     * <code>OS_NotTouched = 7;</code>
     */
    public static final int OS_NotTouched_VALUE = 7;
    /**
     * <pre>
     * 已触发
     * </pre>
     *
     * <code>OS_Touched = 8;</code>
     */
    public static final int OS_Touched_VALUE = 8;
    /**
     * <pre>
     * 已拒绝
     * </pre>
     *
     * <code>OS_Rejected = 9;</code>
     */
    public static final int OS_Rejected_VALUE = 9;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return OS_Unknown;
        case 1: return OS_AllTraded;
        case 2: return OS_PartTradedQueueing;
        case 3: return OS_PartTradedNotQueueing;
        case 4: return OS_NoTradeQueueing;
        case 5: return OS_NoTradeNotQueueing;
        case 6: return OS_Canceled;
        case 7: return OS_NotTouched;
        case 8: return OS_Touched;
        case 9: return OS_Rejected;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>() {
            public OrderStatusEnum findValueByNumber(int number) {
              return OrderStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(9);
    }

    private static final OrderStatusEnum[] VALUES = values();

    public static OrderStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderStatusEnum)
  }

  /**
   * <pre>
   * OrderSubmitStatusEnum是一个报单提交状态类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderSubmitStatusEnum}
   */
  public enum OrderSubmitStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OSS_Unknown = 0;</code>
     */
    OSS_Unknown(0),
    /**
     * <pre>
     * 已经提交
     * </pre>
     *
     * <code>OSS_InsertSubmitted = 1;</code>
     */
    OSS_InsertSubmitted(1),
    /**
     * <pre>
     * 撤单已经提交
     * </pre>
     *
     * <code>OSS_CancelSubmitted = 2;</code>
     */
    OSS_CancelSubmitted(2),
    /**
     * <pre>
     * 修改已经提交
     * </pre>
     *
     * <code>OSS_ModifySubmitted = 3;</code>
     */
    OSS_ModifySubmitted(3),
    /**
     * <pre>
     * 已经接受
     * </pre>
     *
     * <code>OSS_Accepted = 4;</code>
     */
    OSS_Accepted(4),
    /**
     * <pre>
     * 报单已经被拒绝
     * </pre>
     *
     * <code>OSS_InsertRejected = 5;</code>
     */
    OSS_InsertRejected(5),
    /**
     * <pre>
     * 撤单已经被拒绝
     * </pre>
     *
     * <code>OSS_CancelRejected = 6;</code>
     */
    OSS_CancelRejected(6),
    /**
     * <pre>
     * 改单已经被拒绝
     * </pre>
     *
     * <code>OSS_ModifyRejected = 7;</code>
     */
    OSS_ModifyRejected(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OSS_Unknown = 0;</code>
     */
    public static final int OSS_Unknown_VALUE = 0;
    /**
     * <pre>
     * 已经提交
     * </pre>
     *
     * <code>OSS_InsertSubmitted = 1;</code>
     */
    public static final int OSS_InsertSubmitted_VALUE = 1;
    /**
     * <pre>
     * 撤单已经提交
     * </pre>
     *
     * <code>OSS_CancelSubmitted = 2;</code>
     */
    public static final int OSS_CancelSubmitted_VALUE = 2;
    /**
     * <pre>
     * 修改已经提交
     * </pre>
     *
     * <code>OSS_ModifySubmitted = 3;</code>
     */
    public static final int OSS_ModifySubmitted_VALUE = 3;
    /**
     * <pre>
     * 已经接受
     * </pre>
     *
     * <code>OSS_Accepted = 4;</code>
     */
    public static final int OSS_Accepted_VALUE = 4;
    /**
     * <pre>
     * 报单已经被拒绝
     * </pre>
     *
     * <code>OSS_InsertRejected = 5;</code>
     */
    public static final int OSS_InsertRejected_VALUE = 5;
    /**
     * <pre>
     * 撤单已经被拒绝
     * </pre>
     *
     * <code>OSS_CancelRejected = 6;</code>
     */
    public static final int OSS_CancelRejected_VALUE = 6;
    /**
     * <pre>
     * 改单已经被拒绝
     * </pre>
     *
     * <code>OSS_ModifyRejected = 7;</code>
     */
    public static final int OSS_ModifyRejected_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderSubmitStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderSubmitStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return OSS_Unknown;
        case 1: return OSS_InsertSubmitted;
        case 2: return OSS_CancelSubmitted;
        case 3: return OSS_ModifySubmitted;
        case 4: return OSS_Accepted;
        case 5: return OSS_InsertRejected;
        case 6: return OSS_CancelRejected;
        case 7: return OSS_ModifyRejected;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderSubmitStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderSubmitStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderSubmitStatusEnum>() {
            public OrderSubmitStatusEnum findValueByNumber(int number) {
              return OrderSubmitStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(10);
    }

    private static final OrderSubmitStatusEnum[] VALUES = values();

    public static OrderSubmitStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderSubmitStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderSubmitStatusEnum)
  }

  /**
   * <pre>
   * ProductClassEnum是一个产品类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ProductClassEnum}
   */
  public enum ProductClassEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownProductClass = 0;</code>
     */
    UnknownProductClass(0),
    /**
     * <pre>
     * 股票
     * </pre>
     *
     * <code>EQUITY = 1;</code>
     */
    EQUITY(1),
    /**
     * <pre>
     * 期货
     * </pre>
     *
     * <code>FUTURES = 2;</code>
     */
    FUTURES(2),
    /**
     * <pre>
     * 期权
     * </pre>
     *
     * <code>OPTION = 3;</code>
     */
    OPTION(3),
    /**
     * <pre>
     * 指数
     * </pre>
     *
     * <code>INDEX = 4;</code>
     */
    INDEX(4),
    /**
     * <pre>
     * 组合
     * </pre>
     *
     * <code>COMBINATION = 5;</code>
     */
    COMBINATION(5),
    /**
     * <pre>
     * 债券
     * </pre>
     *
     * <code>BOND = 6;</code>
     */
    BOND(6),
    /**
     * <pre>
     * 外汇
     * </pre>
     *
     * <code>FOREX = 7;</code>
     */
    FOREX(7),
    /**
     * <pre>
     * 现货
     * </pre>
     *
     * <code>SPOT = 8;</code>
     */
    SPOT(8),
    /**
     * <pre>
     * 展期
     * </pre>
     *
     * <code>DEFER = 9;</code>
     */
    DEFER(9),
    /**
     * <pre>
     * ETF
     * </pre>
     *
     * <code>ETF = 10;</code>
     */
    ETF(10),
    /**
     * <pre>
     * 权证
     * </pre>
     *
     * <code>WARRANTS = 11;</code>
     */
    WARRANTS(11),
    /**
     * <pre>
     * 价差
     * </pre>
     *
     * <code>SPREAD = 12;</code>
     */
    SPREAD(12),
    /**
     * <pre>
     * 基金
     * </pre>
     *
     * <code>FUND = 13;</code>
     */
    FUND(13),
    /**
     * <pre>
     * 期转现
     * </pre>
     *
     * <code>EFP = 14;</code>
     */
    EFP(14),
    /**
     * <pre>
     * 现货期权
     * </pre>
     *
     * <code>SPOTOPTION = 15;</code>
     */
    SPOTOPTION(15),
    /**
     * <pre>
     * 币币杠杆
     * </pre>
     *
     * <code>MARGIN = 16;</code>
     */
    MARGIN(16),
    /**
     * <pre>
     * 永续合约
     * </pre>
     *
     * <code>SWAP = 17;</code>
     */
    SWAP(17),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownProductClass = 0;</code>
     */
    public static final int UnknownProductClass_VALUE = 0;
    /**
     * <pre>
     * 股票
     * </pre>
     *
     * <code>EQUITY = 1;</code>
     */
    public static final int EQUITY_VALUE = 1;
    /**
     * <pre>
     * 期货
     * </pre>
     *
     * <code>FUTURES = 2;</code>
     */
    public static final int FUTURES_VALUE = 2;
    /**
     * <pre>
     * 期权
     * </pre>
     *
     * <code>OPTION = 3;</code>
     */
    public static final int OPTION_VALUE = 3;
    /**
     * <pre>
     * 指数
     * </pre>
     *
     * <code>INDEX = 4;</code>
     */
    public static final int INDEX_VALUE = 4;
    /**
     * <pre>
     * 组合
     * </pre>
     *
     * <code>COMBINATION = 5;</code>
     */
    public static final int COMBINATION_VALUE = 5;
    /**
     * <pre>
     * 债券
     * </pre>
     *
     * <code>BOND = 6;</code>
     */
    public static final int BOND_VALUE = 6;
    /**
     * <pre>
     * 外汇
     * </pre>
     *
     * <code>FOREX = 7;</code>
     */
    public static final int FOREX_VALUE = 7;
    /**
     * <pre>
     * 现货
     * </pre>
     *
     * <code>SPOT = 8;</code>
     */
    public static final int SPOT_VALUE = 8;
    /**
     * <pre>
     * 展期
     * </pre>
     *
     * <code>DEFER = 9;</code>
     */
    public static final int DEFER_VALUE = 9;
    /**
     * <pre>
     * ETF
     * </pre>
     *
     * <code>ETF = 10;</code>
     */
    public static final int ETF_VALUE = 10;
    /**
     * <pre>
     * 权证
     * </pre>
     *
     * <code>WARRANTS = 11;</code>
     */
    public static final int WARRANTS_VALUE = 11;
    /**
     * <pre>
     * 价差
     * </pre>
     *
     * <code>SPREAD = 12;</code>
     */
    public static final int SPREAD_VALUE = 12;
    /**
     * <pre>
     * 基金
     * </pre>
     *
     * <code>FUND = 13;</code>
     */
    public static final int FUND_VALUE = 13;
    /**
     * <pre>
     * 期转现
     * </pre>
     *
     * <code>EFP = 14;</code>
     */
    public static final int EFP_VALUE = 14;
    /**
     * <pre>
     * 现货期权
     * </pre>
     *
     * <code>SPOTOPTION = 15;</code>
     */
    public static final int SPOTOPTION_VALUE = 15;
    /**
     * <pre>
     * 币币杠杆
     * </pre>
     *
     * <code>MARGIN = 16;</code>
     */
    public static final int MARGIN_VALUE = 16;
    /**
     * <pre>
     * 永续合约
     * </pre>
     *
     * <code>SWAP = 17;</code>
     */
    public static final int SWAP_VALUE = 17;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProductClassEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ProductClassEnum forNumber(int value) {
      switch (value) {
        case 0: return UnknownProductClass;
        case 1: return EQUITY;
        case 2: return FUTURES;
        case 3: return OPTION;
        case 4: return INDEX;
        case 5: return COMBINATION;
        case 6: return BOND;
        case 7: return FOREX;
        case 8: return SPOT;
        case 9: return DEFER;
        case 10: return ETF;
        case 11: return WARRANTS;
        case 12: return SPREAD;
        case 13: return FUND;
        case 14: return EFP;
        case 15: return SPOTOPTION;
        case 16: return MARGIN;
        case 17: return SWAP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProductClassEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ProductClassEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProductClassEnum>() {
            public ProductClassEnum findValueByNumber(int number) {
              return ProductClassEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(11);
    }

    private static final ProductClassEnum[] VALUES = values();

    public static ProductClassEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ProductClassEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ProductClassEnum)
  }

  /**
   * Protobuf enum {@code xyz.redtorch.pb.DirectionEnum}
   */
  public enum DirectionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>D_Unknown = 0;</code>
     */
    D_Unknown(0),
    /**
     * <pre>
     * 买 
     * </pre>
     *
     * <code>D_Buy = 1;</code>
     */
    D_Buy(1),
    /**
     * <pre>
     * 卖
     * </pre>
     *
     * <code>D_Sell = 2;</code>
     */
    D_Sell(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>D_Unknown = 0;</code>
     */
    public static final int D_Unknown_VALUE = 0;
    /**
     * <pre>
     * 买 
     * </pre>
     *
     * <code>D_Buy = 1;</code>
     */
    public static final int D_Buy_VALUE = 1;
    /**
     * <pre>
     * 卖
     * </pre>
     *
     * <code>D_Sell = 2;</code>
     */
    public static final int D_Sell_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DirectionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DirectionEnum forNumber(int value) {
      switch (value) {
        case 0: return D_Unknown;
        case 1: return D_Buy;
        case 2: return D_Sell;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DirectionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DirectionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DirectionEnum>() {
            public DirectionEnum findValueByNumber(int number) {
              return DirectionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(12);
    }

    private static final DirectionEnum[] VALUES = values();

    public static DirectionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DirectionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.DirectionEnum)
  }

  /**
   * <pre>
   * PositionTypeEnum是一个持仓类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.PositionTypeEnum}
   */
  public enum PositionTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PT_Unknown = 0;</code>
     */
    PT_Unknown(0),
    /**
     * <pre>
     * 净持仓
     * </pre>
     *
     * <code>PT_Net = 1;</code>
     */
    PT_Net(1),
    /**
     * <pre>
     * 综合持仓
     * </pre>
     *
     * <code>PT_Gross = 2;</code>
     */
    PT_Gross(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PT_Unknown = 0;</code>
     */
    public static final int PT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 净持仓
     * </pre>
     *
     * <code>PT_Net = 1;</code>
     */
    public static final int PT_Net_VALUE = 1;
    /**
     * <pre>
     * 综合持仓
     * </pre>
     *
     * <code>PT_Gross = 2;</code>
     */
    public static final int PT_Gross_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PositionTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PositionTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return PT_Unknown;
        case 1: return PT_Net;
        case 2: return PT_Gross;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PositionTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PositionTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PositionTypeEnum>() {
            public PositionTypeEnum findValueByNumber(int number) {
              return PositionTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(13);
    }

    private static final PositionTypeEnum[] VALUES = values();

    public static PositionTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PositionTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.PositionTypeEnum)
  }

  /**
   * <pre>
   * PositionDirectionEnum是一个持仓多空方向类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.PositionDirectionEnum}
   */
  public enum PositionDirectionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PD_Unknown = 0;</code>
     */
    PD_Unknown(0),
    /**
     * <pre>
     * 净
     * </pre>
     *
     * <code>PD_Net = 1;</code>
     */
    PD_Net(1),
    /**
     * <pre>
     * 多
     * </pre>
     *
     * <code>PD_Long = 2;</code>
     */
    PD_Long(2),
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>PD_Short = 3;</code>
     */
    PD_Short(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PD_Unknown = 0;</code>
     */
    public static final int PD_Unknown_VALUE = 0;
    /**
     * <pre>
     * 净
     * </pre>
     *
     * <code>PD_Net = 1;</code>
     */
    public static final int PD_Net_VALUE = 1;
    /**
     * <pre>
     * 多
     * </pre>
     *
     * <code>PD_Long = 2;</code>
     */
    public static final int PD_Long_VALUE = 2;
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>PD_Short = 3;</code>
     */
    public static final int PD_Short_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PositionDirectionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PositionDirectionEnum forNumber(int value) {
      switch (value) {
        case 0: return PD_Unknown;
        case 1: return PD_Net;
        case 2: return PD_Long;
        case 3: return PD_Short;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PositionDirectionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PositionDirectionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PositionDirectionEnum>() {
            public PositionDirectionEnum findValueByNumber(int number) {
              return PositionDirectionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(14);
    }

    private static final PositionDirectionEnum[] VALUES = values();

    public static PositionDirectionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PositionDirectionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.PositionDirectionEnum)
  }

  /**
   * <pre>
   * HedgeFlagEnum是一个投机套保标志类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.HedgeFlagEnum}
   */
  public enum HedgeFlagEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>HF_Unknown = 0;</code>
     */
    HF_Unknown(0),
    /**
     * <pre>
     * 投机
     * </pre>
     *
     * <code>HF_Speculation = 1;</code>
     */
    HF_Speculation(1),
    /**
     * <pre>
     * 套利
     * </pre>
     *
     * <code>HF_Arbitrage = 2;</code>
     */
    HF_Arbitrage(2),
    /**
     * <pre>
     * 套保
     * </pre>
     *
     * <code>HF_Hedge = 3;</code>
     */
    HF_Hedge(3),
    /**
     * <pre>
     * 做市商
     * </pre>
     *
     * <code>HF_MarketMaker = 4;</code>
     */
    HF_MarketMaker(4),
    /**
     * <pre>
     * 第一腿投机第二腿套保 大商所专用
     * </pre>
     *
     * <code>HF_SpecHedge = 5;</code>
     */
    HF_SpecHedge(5),
    /**
     * <pre>
     * 第一腿套保第二腿投机  大商所专用
     * </pre>
     *
     * <code>HF_HedgeSpec = 6;</code>
     */
    HF_HedgeSpec(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>HF_Unknown = 0;</code>
     */
    public static final int HF_Unknown_VALUE = 0;
    /**
     * <pre>
     * 投机
     * </pre>
     *
     * <code>HF_Speculation = 1;</code>
     */
    public static final int HF_Speculation_VALUE = 1;
    /**
     * <pre>
     * 套利
     * </pre>
     *
     * <code>HF_Arbitrage = 2;</code>
     */
    public static final int HF_Arbitrage_VALUE = 2;
    /**
     * <pre>
     * 套保
     * </pre>
     *
     * <code>HF_Hedge = 3;</code>
     */
    public static final int HF_Hedge_VALUE = 3;
    /**
     * <pre>
     * 做市商
     * </pre>
     *
     * <code>HF_MarketMaker = 4;</code>
     */
    public static final int HF_MarketMaker_VALUE = 4;
    /**
     * <pre>
     * 第一腿投机第二腿套保 大商所专用
     * </pre>
     *
     * <code>HF_SpecHedge = 5;</code>
     */
    public static final int HF_SpecHedge_VALUE = 5;
    /**
     * <pre>
     * 第一腿套保第二腿投机  大商所专用
     * </pre>
     *
     * <code>HF_HedgeSpec = 6;</code>
     */
    public static final int HF_HedgeSpec_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HedgeFlagEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HedgeFlagEnum forNumber(int value) {
      switch (value) {
        case 0: return HF_Unknown;
        case 1: return HF_Speculation;
        case 2: return HF_Arbitrage;
        case 3: return HF_Hedge;
        case 4: return HF_MarketMaker;
        case 5: return HF_SpecHedge;
        case 6: return HF_HedgeSpec;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HedgeFlagEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HedgeFlagEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HedgeFlagEnum>() {
            public HedgeFlagEnum findValueByNumber(int number) {
              return HedgeFlagEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(15);
    }

    private static final HedgeFlagEnum[] VALUES = values();

    public static HedgeFlagEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HedgeFlagEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.HedgeFlagEnum)
  }

  /**
   * <pre>
   * OrderPriceTypeEnum是一个报单价格条件类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderPriceTypeEnum}
   */
  public enum OrderPriceTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OPT_Unknown = 0;</code>
     */
    OPT_Unknown(0),
    /**
     * <pre>
     * 任意价
     * </pre>
     *
     * <code>OPT_AnyPrice = 1;</code>
     */
    OPT_AnyPrice(1),
    /**
     * <pre>
     * 限价
     * </pre>
     *
     * <code>OPT_LimitPrice = 2;</code>
     */
    OPT_LimitPrice(2),
    /**
     * <pre>
     * 最优价
     * </pre>
     *
     * <code>OPT_BestPrice = 3;</code>
     */
    OPT_BestPrice(3),
    /**
     * <pre>
     * 最新价
     * </pre>
     *
     * <code>OPT_LastPrice = 4;</code>
     */
    OPT_LastPrice(4),
    /**
     * <pre>
     * 最新价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusOneTicks = 5;</code>
     */
    OPT_LastPricePlusOneTicks(5),
    /**
     * <pre>
     * 最新价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusTwoTicks = 6;</code>
     */
    OPT_LastPricePlusTwoTicks(6),
    /**
     * <pre>
     * 最新价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusThreeTicks = 7;</code>
     */
    OPT_LastPricePlusThreeTicks(7),
    /**
     * <pre>
     * 卖一价
     * </pre>
     *
     * <code>OPT_AskPrice1 = 8;</code>
     */
    OPT_AskPrice1(8),
    /**
     * <pre>
     * 卖一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusOneTicks = 9;</code>
     */
    OPT_AskPrice1PlusOneTicks(9),
    /**
     * <pre>
     * 卖一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusTwoTicks = 10;</code>
     */
    OPT_AskPrice1PlusTwoTicks(10),
    /**
     * <pre>
     *  卖一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusThreeTicks = 11;</code>
     */
    OPT_AskPrice1PlusThreeTicks(11),
    /**
     * <pre>
     * 买一价
     * </pre>
     *
     * <code>OPT_BidPrice1 = 12;</code>
     */
    OPT_BidPrice1(12),
    /**
     * <pre>
     * 买一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusOneTicks = 13;</code>
     */
    OPT_BidPrice1PlusOneTicks(13),
    /**
     * <pre>
     * 买一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusTwoTicks = 14;</code>
     */
    OPT_BidPrice1PlusTwoTicks(14),
    /**
     * <pre>
     * 买一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusThreeTicks = 15;</code>
     */
    OPT_BidPrice1PlusThreeTicks(15),
    /**
     * <pre>
     * 五档价
     * </pre>
     *
     * <code>OPT_FiveLevelPrice = 16;</code>
     */
    OPT_FiveLevelPrice(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OPT_Unknown = 0;</code>
     */
    public static final int OPT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 任意价
     * </pre>
     *
     * <code>OPT_AnyPrice = 1;</code>
     */
    public static final int OPT_AnyPrice_VALUE = 1;
    /**
     * <pre>
     * 限价
     * </pre>
     *
     * <code>OPT_LimitPrice = 2;</code>
     */
    public static final int OPT_LimitPrice_VALUE = 2;
    /**
     * <pre>
     * 最优价
     * </pre>
     *
     * <code>OPT_BestPrice = 3;</code>
     */
    public static final int OPT_BestPrice_VALUE = 3;
    /**
     * <pre>
     * 最新价
     * </pre>
     *
     * <code>OPT_LastPrice = 4;</code>
     */
    public static final int OPT_LastPrice_VALUE = 4;
    /**
     * <pre>
     * 最新价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusOneTicks = 5;</code>
     */
    public static final int OPT_LastPricePlusOneTicks_VALUE = 5;
    /**
     * <pre>
     * 最新价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusTwoTicks = 6;</code>
     */
    public static final int OPT_LastPricePlusTwoTicks_VALUE = 6;
    /**
     * <pre>
     * 最新价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusThreeTicks = 7;</code>
     */
    public static final int OPT_LastPricePlusThreeTicks_VALUE = 7;
    /**
     * <pre>
     * 卖一价
     * </pre>
     *
     * <code>OPT_AskPrice1 = 8;</code>
     */
    public static final int OPT_AskPrice1_VALUE = 8;
    /**
     * <pre>
     * 卖一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusOneTicks = 9;</code>
     */
    public static final int OPT_AskPrice1PlusOneTicks_VALUE = 9;
    /**
     * <pre>
     * 卖一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusTwoTicks = 10;</code>
     */
    public static final int OPT_AskPrice1PlusTwoTicks_VALUE = 10;
    /**
     * <pre>
     *  卖一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusThreeTicks = 11;</code>
     */
    public static final int OPT_AskPrice1PlusThreeTicks_VALUE = 11;
    /**
     * <pre>
     * 买一价
     * </pre>
     *
     * <code>OPT_BidPrice1 = 12;</code>
     */
    public static final int OPT_BidPrice1_VALUE = 12;
    /**
     * <pre>
     * 买一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusOneTicks = 13;</code>
     */
    public static final int OPT_BidPrice1PlusOneTicks_VALUE = 13;
    /**
     * <pre>
     * 买一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusTwoTicks = 14;</code>
     */
    public static final int OPT_BidPrice1PlusTwoTicks_VALUE = 14;
    /**
     * <pre>
     * 买一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusThreeTicks = 15;</code>
     */
    public static final int OPT_BidPrice1PlusThreeTicks_VALUE = 15;
    /**
     * <pre>
     * 五档价
     * </pre>
     *
     * <code>OPT_FiveLevelPrice = 16;</code>
     */
    public static final int OPT_FiveLevelPrice_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderPriceTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderPriceTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return OPT_Unknown;
        case 1: return OPT_AnyPrice;
        case 2: return OPT_LimitPrice;
        case 3: return OPT_BestPrice;
        case 4: return OPT_LastPrice;
        case 5: return OPT_LastPricePlusOneTicks;
        case 6: return OPT_LastPricePlusTwoTicks;
        case 7: return OPT_LastPricePlusThreeTicks;
        case 8: return OPT_AskPrice1;
        case 9: return OPT_AskPrice1PlusOneTicks;
        case 10: return OPT_AskPrice1PlusTwoTicks;
        case 11: return OPT_AskPrice1PlusThreeTicks;
        case 12: return OPT_BidPrice1;
        case 13: return OPT_BidPrice1PlusOneTicks;
        case 14: return OPT_BidPrice1PlusTwoTicks;
        case 15: return OPT_BidPrice1PlusThreeTicks;
        case 16: return OPT_FiveLevelPrice;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderPriceTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderPriceTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderPriceTypeEnum>() {
            public OrderPriceTypeEnum findValueByNumber(int number) {
              return OrderPriceTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(16);
    }

    private static final OrderPriceTypeEnum[] VALUES = values();

    public static OrderPriceTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderPriceTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderPriceTypeEnum)
  }

  /**
   * <pre>
   * OffsetFlagEnum是一个开平标志类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OffsetFlagEnum}
   */
  public enum OffsetFlagEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OF_Unknown = 0;</code>
     */
    OF_Unknown(0),
    /**
     * <pre>
     * 开仓
     * </pre>
     *
     * <code>OF_Open = 1;</code>
     */
    OF_Open(1),
    /**
     * <pre>
     * 平仓
     * </pre>
     *
     * <code>OF_Close = 2;</code>
     */
    OF_Close(2),
    /**
     * <pre>
     * 强平
     * </pre>
     *
     * <code>OF_ForceClose = 3;</code>
     */
    OF_ForceClose(3),
    /**
     * <pre>
     * 平今
     * </pre>
     *
     * <code>OF_CloseToday = 4;</code>
     */
    OF_CloseToday(4),
    /**
     * <pre>
     * 平昨
     * </pre>
     *
     * <code>OF_CloseYesterday = 5;</code>
     */
    OF_CloseYesterday(5),
    /**
     * <pre>
     * 强减
     * </pre>
     *
     * <code>OF_ForceOff = 6;</code>
     */
    OF_ForceOff(6),
    /**
     * <pre>
     * 本地强平
     * </pre>
     *
     * <code>OF_LocalForceClose = 7;</code>
     */
    OF_LocalForceClose(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OF_Unknown = 0;</code>
     */
    public static final int OF_Unknown_VALUE = 0;
    /**
     * <pre>
     * 开仓
     * </pre>
     *
     * <code>OF_Open = 1;</code>
     */
    public static final int OF_Open_VALUE = 1;
    /**
     * <pre>
     * 平仓
     * </pre>
     *
     * <code>OF_Close = 2;</code>
     */
    public static final int OF_Close_VALUE = 2;
    /**
     * <pre>
     * 强平
     * </pre>
     *
     * <code>OF_ForceClose = 3;</code>
     */
    public static final int OF_ForceClose_VALUE = 3;
    /**
     * <pre>
     * 平今
     * </pre>
     *
     * <code>OF_CloseToday = 4;</code>
     */
    public static final int OF_CloseToday_VALUE = 4;
    /**
     * <pre>
     * 平昨
     * </pre>
     *
     * <code>OF_CloseYesterday = 5;</code>
     */
    public static final int OF_CloseYesterday_VALUE = 5;
    /**
     * <pre>
     * 强减
     * </pre>
     *
     * <code>OF_ForceOff = 6;</code>
     */
    public static final int OF_ForceOff_VALUE = 6;
    /**
     * <pre>
     * 本地强平
     * </pre>
     *
     * <code>OF_LocalForceClose = 7;</code>
     */
    public static final int OF_LocalForceClose_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OffsetFlagEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OffsetFlagEnum forNumber(int value) {
      switch (value) {
        case 0: return OF_Unknown;
        case 1: return OF_Open;
        case 2: return OF_Close;
        case 3: return OF_ForceClose;
        case 4: return OF_CloseToday;
        case 5: return OF_CloseYesterday;
        case 6: return OF_ForceOff;
        case 7: return OF_LocalForceClose;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OffsetFlagEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OffsetFlagEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OffsetFlagEnum>() {
            public OffsetFlagEnum findValueByNumber(int number) {
              return OffsetFlagEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(17);
    }

    private static final OffsetFlagEnum[] VALUES = values();

    public static OffsetFlagEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OffsetFlagEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OffsetFlagEnum)
  }

  /**
   * <pre>
   * ForceCloseReasonEnum是一个强平原因类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ForceCloseReasonEnum}
   */
  public enum ForceCloseReasonEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>FCR_Unknown = 0;</code>
     */
    FCR_Unknown(0),
    /**
     * <pre>
     * 非强平
     * </pre>
     *
     * <code>FCR_NotForceClose = 1;</code>
     */
    FCR_NotForceClose(1),
    /**
     * <pre>
     * 资金不足
     * </pre>
     *
     * <code>FCR_LackDeposit = 2;</code>
     */
    FCR_LackDeposit(2),
    /**
     * <pre>
     * 客户超仓
     * </pre>
     *
     * <code>FCR_ClientOverPositionLimit = 3;</code>
     */
    FCR_ClientOverPositionLimit(3),
    /**
     * <pre>
     * 会员超仓
     * </pre>
     *
     * <code>FCR_MemberOverPositionLimit = 4;</code>
     */
    FCR_MemberOverPositionLimit(4),
    /**
     * <pre>
     * 持仓非整数倍
     * </pre>
     *
     * <code>FCR_NotMultiple = 5;</code>
     */
    FCR_NotMultiple(5),
    /**
     * <pre>
     * 违规
     * </pre>
     *
     * <code>FCR_Violation = 6;</code>
     */
    FCR_Violation(6),
    /**
     * <pre>
     * 其它
     * </pre>
     *
     * <code>FCR_Other = 7;</code>
     */
    FCR_Other(7),
    /**
     * <pre>
     * 自然人临近交割
     * </pre>
     *
     * <code>FCR_PersonDeliver = 8;</code>
     */
    FCR_PersonDeliver(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>FCR_Unknown = 0;</code>
     */
    public static final int FCR_Unknown_VALUE = 0;
    /**
     * <pre>
     * 非强平
     * </pre>
     *
     * <code>FCR_NotForceClose = 1;</code>
     */
    public static final int FCR_NotForceClose_VALUE = 1;
    /**
     * <pre>
     * 资金不足
     * </pre>
     *
     * <code>FCR_LackDeposit = 2;</code>
     */
    public static final int FCR_LackDeposit_VALUE = 2;
    /**
     * <pre>
     * 客户超仓
     * </pre>
     *
     * <code>FCR_ClientOverPositionLimit = 3;</code>
     */
    public static final int FCR_ClientOverPositionLimit_VALUE = 3;
    /**
     * <pre>
     * 会员超仓
     * </pre>
     *
     * <code>FCR_MemberOverPositionLimit = 4;</code>
     */
    public static final int FCR_MemberOverPositionLimit_VALUE = 4;
    /**
     * <pre>
     * 持仓非整数倍
     * </pre>
     *
     * <code>FCR_NotMultiple = 5;</code>
     */
    public static final int FCR_NotMultiple_VALUE = 5;
    /**
     * <pre>
     * 违规
     * </pre>
     *
     * <code>FCR_Violation = 6;</code>
     */
    public static final int FCR_Violation_VALUE = 6;
    /**
     * <pre>
     * 其它
     * </pre>
     *
     * <code>FCR_Other = 7;</code>
     */
    public static final int FCR_Other_VALUE = 7;
    /**
     * <pre>
     * 自然人临近交割
     * </pre>
     *
     * <code>FCR_PersonDeliver = 8;</code>
     */
    public static final int FCR_PersonDeliver_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ForceCloseReasonEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ForceCloseReasonEnum forNumber(int value) {
      switch (value) {
        case 0: return FCR_Unknown;
        case 1: return FCR_NotForceClose;
        case 2: return FCR_LackDeposit;
        case 3: return FCR_ClientOverPositionLimit;
        case 4: return FCR_MemberOverPositionLimit;
        case 5: return FCR_NotMultiple;
        case 6: return FCR_Violation;
        case 7: return FCR_Other;
        case 8: return FCR_PersonDeliver;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ForceCloseReasonEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ForceCloseReasonEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ForceCloseReasonEnum>() {
            public ForceCloseReasonEnum findValueByNumber(int number) {
              return ForceCloseReasonEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(18);
    }

    private static final ForceCloseReasonEnum[] VALUES = values();

    public static ForceCloseReasonEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ForceCloseReasonEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ForceCloseReasonEnum)
  }

  /**
   * <pre>
   * OrderTypeEnum是一个报单类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderTypeEnum}
   */
  public enum OrderTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OT_Unknown = 0;</code>
     */
    OT_Unknown(0),
    /**
     * <pre>
     * 正常
     * </pre>
     *
     * <code>OT_Normal = 1;</code>
     */
    OT_Normal(1),
    /**
     * <pre>
     * 报价衍生
     * </pre>
     *
     * <code>OT_DeriveFromQuote = 2;</code>
     */
    OT_DeriveFromQuote(2),
    /**
     * <pre>
     * 组合衍生
     * </pre>
     *
     * <code>OT_DeriveFromCombination = 3;</code>
     */
    OT_DeriveFromCombination(3),
    /**
     * <pre>
     * 组合报单
     * </pre>
     *
     * <code>OT_Combination = 4;</code>
     */
    OT_Combination(4),
    /**
     * <pre>
     * 条件单
     * </pre>
     *
     * <code>OT_ConditionalOrder = 5;</code>
     */
    OT_ConditionalOrder(5),
    /**
     * <pre>
     * 互换单
     * </pre>
     *
     * <code>OT_Swap = 6;</code>
     */
    OT_Swap(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OT_Unknown = 0;</code>
     */
    public static final int OT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 正常
     * </pre>
     *
     * <code>OT_Normal = 1;</code>
     */
    public static final int OT_Normal_VALUE = 1;
    /**
     * <pre>
     * 报价衍生
     * </pre>
     *
     * <code>OT_DeriveFromQuote = 2;</code>
     */
    public static final int OT_DeriveFromQuote_VALUE = 2;
    /**
     * <pre>
     * 组合衍生
     * </pre>
     *
     * <code>OT_DeriveFromCombination = 3;</code>
     */
    public static final int OT_DeriveFromCombination_VALUE = 3;
    /**
     * <pre>
     * 组合报单
     * </pre>
     *
     * <code>OT_Combination = 4;</code>
     */
    public static final int OT_Combination_VALUE = 4;
    /**
     * <pre>
     * 条件单
     * </pre>
     *
     * <code>OT_ConditionalOrder = 5;</code>
     */
    public static final int OT_ConditionalOrder_VALUE = 5;
    /**
     * <pre>
     * 互换单
     * </pre>
     *
     * <code>OT_Swap = 6;</code>
     */
    public static final int OT_Swap_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return OT_Unknown;
        case 1: return OT_Normal;
        case 2: return OT_DeriveFromQuote;
        case 3: return OT_DeriveFromCombination;
        case 4: return OT_Combination;
        case 5: return OT_ConditionalOrder;
        case 6: return OT_Swap;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>() {
            public OrderTypeEnum findValueByNumber(int number) {
              return OrderTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(19);
    }

    private static final OrderTypeEnum[] VALUES = values();

    public static OrderTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderTypeEnum)
  }

  /**
   * <pre>
   * TimeConditionEnum是一个有效期类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.TimeConditionEnum}
   */
  public enum TimeConditionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TC_Unknown = 0;</code>
     */
    TC_Unknown(0),
    /**
     * <pre>
     * 立即完成，否则撤销
     * </pre>
     *
     * <code>TC_IOC = 1;</code>
     */
    TC_IOC(1),
    /**
     * <pre>
     * 本节有效
     * </pre>
     *
     * <code>TC_GFS = 2;</code>
     */
    TC_GFS(2),
    /**
     * <pre>
     * 当日有效
     * </pre>
     *
     * <code>TC_GFD = 3;</code>
     */
    TC_GFD(3),
    /**
     * <pre>
     * 指定日期前有效
     * </pre>
     *
     * <code>TC_GTD = 4;</code>
     */
    TC_GTD(4),
    /**
     * <pre>
     * 撤销前有效
     * </pre>
     *
     * <code>TC_GTC = 5;</code>
     */
    TC_GTC(5),
    /**
     * <pre>
     * 集合竞价有效
     * </pre>
     *
     * <code>TC_GFA = 6;</code>
     */
    TC_GFA(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TC_Unknown = 0;</code>
     */
    public static final int TC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 立即完成，否则撤销
     * </pre>
     *
     * <code>TC_IOC = 1;</code>
     */
    public static final int TC_IOC_VALUE = 1;
    /**
     * <pre>
     * 本节有效
     * </pre>
     *
     * <code>TC_GFS = 2;</code>
     */
    public static final int TC_GFS_VALUE = 2;
    /**
     * <pre>
     * 当日有效
     * </pre>
     *
     * <code>TC_GFD = 3;</code>
     */
    public static final int TC_GFD_VALUE = 3;
    /**
     * <pre>
     * 指定日期前有效
     * </pre>
     *
     * <code>TC_GTD = 4;</code>
     */
    public static final int TC_GTD_VALUE = 4;
    /**
     * <pre>
     * 撤销前有效
     * </pre>
     *
     * <code>TC_GTC = 5;</code>
     */
    public static final int TC_GTC_VALUE = 5;
    /**
     * <pre>
     * 集合竞价有效
     * </pre>
     *
     * <code>TC_GFA = 6;</code>
     */
    public static final int TC_GFA_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimeConditionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TimeConditionEnum forNumber(int value) {
      switch (value) {
        case 0: return TC_Unknown;
        case 1: return TC_IOC;
        case 2: return TC_GFS;
        case 3: return TC_GFD;
        case 4: return TC_GTD;
        case 5: return TC_GTC;
        case 6: return TC_GFA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimeConditionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TimeConditionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TimeConditionEnum>() {
            public TimeConditionEnum findValueByNumber(int number) {
              return TimeConditionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(20);
    }

    private static final TimeConditionEnum[] VALUES = values();

    public static TimeConditionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimeConditionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.TimeConditionEnum)
  }

  /**
   * <pre>
   * VolumeConditionEnum是一个成交量类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.VolumeConditionEnum}
   */
  public enum VolumeConditionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>VC_Unknown = 0;</code>
     */
    VC_Unknown(0),
    /**
     * <pre>
     * 任何数量
     * </pre>
     *
     * <code>VC_AV = 1;</code>
     */
    VC_AV(1),
    /**
     * <pre>
     * 最小数量
     * </pre>
     *
     * <code>VC_MV = 2;</code>
     */
    VC_MV(2),
    /**
     * <pre>
     * 全部数量
     * </pre>
     *
     * <code>VC_CV = 3;</code>
     */
    VC_CV(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>VC_Unknown = 0;</code>
     */
    public static final int VC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 任何数量
     * </pre>
     *
     * <code>VC_AV = 1;</code>
     */
    public static final int VC_AV_VALUE = 1;
    /**
     * <pre>
     * 最小数量
     * </pre>
     *
     * <code>VC_MV = 2;</code>
     */
    public static final int VC_MV_VALUE = 2;
    /**
     * <pre>
     * 全部数量
     * </pre>
     *
     * <code>VC_CV = 3;</code>
     */
    public static final int VC_CV_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VolumeConditionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static VolumeConditionEnum forNumber(int value) {
      switch (value) {
        case 0: return VC_Unknown;
        case 1: return VC_AV;
        case 2: return VC_MV;
        case 3: return VC_CV;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<VolumeConditionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        VolumeConditionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<VolumeConditionEnum>() {
            public VolumeConditionEnum findValueByNumber(int number) {
              return VolumeConditionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(21);
    }

    private static final VolumeConditionEnum[] VALUES = values();

    public static VolumeConditionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private VolumeConditionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.VolumeConditionEnum)
  }

  /**
   * <pre>
   * ContingentConditionEnum是一个触发条件类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ContingentConditionEnum}
   */
  public enum ContingentConditionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>CC_Unknown = 0;</code>
     */
    CC_Unknown(0),
    /**
     * <pre>
     * 立即
     * </pre>
     *
     * <code>CC_Immediately = 1;</code>
     */
    CC_Immediately(1),
    /**
     * <pre>
     * 止损
     * </pre>
     *
     * <code>CC_Touch = 2;</code>
     */
    CC_Touch(2),
    /**
     * <pre>
     * 止赢
     * </pre>
     *
     * <code>CC_TouchProfit = 3;</code>
     */
    CC_TouchProfit(3),
    /**
     * <pre>
     * 预埋单
     * </pre>
     *
     * <code>CC_ParkedOrder = 4;</code>
     */
    CC_ParkedOrder(4),
    /**
     * <pre>
     * 最新价大于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterThanStopPrice = 5;</code>
     */
    CC_LastPriceGreaterThanStopPrice(5),
    /**
     * <pre>
     * 最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterEqualStopPrice = 6;</code>
     */
    CC_LastPriceGreaterEqualStopPrice(6),
    /**
     * <pre>
     * 最新价小于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserThanStopPrice = 7;</code>
     */
    CC_LastPriceLesserThanStopPrice(7),
    /**
     * <pre>
     * 最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserEqualStopPrice = 8;</code>
     */
    CC_LastPriceLesserEqualStopPrice(8),
    /**
     * <pre>
     * 卖一价大于条件价
     * </pre>
     *
     * <code>CC_AskPriceGreaterThanStopPrice = 9;</code>
     */
    CC_AskPriceGreaterThanStopPrice(9),
    /**
     * <pre>
     * 卖一价大于等于条件价 
     * </pre>
     *
     * <code>CC_AskPriceGreaterEqualStopPrice = 10;</code>
     */
    CC_AskPriceGreaterEqualStopPrice(10),
    /**
     * <pre>
     * 卖一价小于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserThanStopPrice = 11;</code>
     */
    CC_AskPriceLesserThanStopPrice(11),
    /**
     * <pre>
     * 卖一价小于等于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserEqualStopPrice = 12;</code>
     */
    CC_AskPriceLesserEqualStopPrice(12),
    /**
     * <pre>
     * 买一价大于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterThanStopPrice = 13;</code>
     */
    CC_BidPriceGreaterThanStopPrice(13),
    /**
     * <pre>
     * 买一价大于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterEqualStopPrice = 14;</code>
     */
    CC_BidPriceGreaterEqualStopPrice(14),
    /**
     * <pre>
     * 买一价小于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserThanStopPrice = 15;</code>
     */
    CC_BidPriceLesserThanStopPrice(15),
    /**
     * <pre>
     * 买一价小于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserEqualStopPrice = 16;</code>
     */
    CC_BidPriceLesserEqualStopPrice(16),
    /**
     * <pre>
     * (本地)最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceLesserEqualStopPrice = 17;</code>
     */
    CC_LocalLastPriceLesserEqualStopPrice(17),
    /**
     * <pre>
     * (本地)最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceGreaterEqualStopPrice = 18;</code>
     */
    CC_LocalLastPriceGreaterEqualStopPrice(18),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>CC_Unknown = 0;</code>
     */
    public static final int CC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 立即
     * </pre>
     *
     * <code>CC_Immediately = 1;</code>
     */
    public static final int CC_Immediately_VALUE = 1;
    /**
     * <pre>
     * 止损
     * </pre>
     *
     * <code>CC_Touch = 2;</code>
     */
    public static final int CC_Touch_VALUE = 2;
    /**
     * <pre>
     * 止赢
     * </pre>
     *
     * <code>CC_TouchProfit = 3;</code>
     */
    public static final int CC_TouchProfit_VALUE = 3;
    /**
     * <pre>
     * 预埋单
     * </pre>
     *
     * <code>CC_ParkedOrder = 4;</code>
     */
    public static final int CC_ParkedOrder_VALUE = 4;
    /**
     * <pre>
     * 最新价大于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterThanStopPrice = 5;</code>
     */
    public static final int CC_LastPriceGreaterThanStopPrice_VALUE = 5;
    /**
     * <pre>
     * 最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterEqualStopPrice = 6;</code>
     */
    public static final int CC_LastPriceGreaterEqualStopPrice_VALUE = 6;
    /**
     * <pre>
     * 最新价小于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserThanStopPrice = 7;</code>
     */
    public static final int CC_LastPriceLesserThanStopPrice_VALUE = 7;
    /**
     * <pre>
     * 最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserEqualStopPrice = 8;</code>
     */
    public static final int CC_LastPriceLesserEqualStopPrice_VALUE = 8;
    /**
     * <pre>
     * 卖一价大于条件价
     * </pre>
     *
     * <code>CC_AskPriceGreaterThanStopPrice = 9;</code>
     */
    public static final int CC_AskPriceGreaterThanStopPrice_VALUE = 9;
    /**
     * <pre>
     * 卖一价大于等于条件价 
     * </pre>
     *
     * <code>CC_AskPriceGreaterEqualStopPrice = 10;</code>
     */
    public static final int CC_AskPriceGreaterEqualStopPrice_VALUE = 10;
    /**
     * <pre>
     * 卖一价小于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserThanStopPrice = 11;</code>
     */
    public static final int CC_AskPriceLesserThanStopPrice_VALUE = 11;
    /**
     * <pre>
     * 卖一价小于等于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserEqualStopPrice = 12;</code>
     */
    public static final int CC_AskPriceLesserEqualStopPrice_VALUE = 12;
    /**
     * <pre>
     * 买一价大于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterThanStopPrice = 13;</code>
     */
    public static final int CC_BidPriceGreaterThanStopPrice_VALUE = 13;
    /**
     * <pre>
     * 买一价大于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterEqualStopPrice = 14;</code>
     */
    public static final int CC_BidPriceGreaterEqualStopPrice_VALUE = 14;
    /**
     * <pre>
     * 买一价小于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserThanStopPrice = 15;</code>
     */
    public static final int CC_BidPriceLesserThanStopPrice_VALUE = 15;
    /**
     * <pre>
     * 买一价小于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserEqualStopPrice = 16;</code>
     */
    public static final int CC_BidPriceLesserEqualStopPrice_VALUE = 16;
    /**
     * <pre>
     * (本地)最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceLesserEqualStopPrice = 17;</code>
     */
    public static final int CC_LocalLastPriceLesserEqualStopPrice_VALUE = 17;
    /**
     * <pre>
     * (本地)最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceGreaterEqualStopPrice = 18;</code>
     */
    public static final int CC_LocalLastPriceGreaterEqualStopPrice_VALUE = 18;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ContingentConditionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ContingentConditionEnum forNumber(int value) {
      switch (value) {
        case 0: return CC_Unknown;
        case 1: return CC_Immediately;
        case 2: return CC_Touch;
        case 3: return CC_TouchProfit;
        case 4: return CC_ParkedOrder;
        case 5: return CC_LastPriceGreaterThanStopPrice;
        case 6: return CC_LastPriceGreaterEqualStopPrice;
        case 7: return CC_LastPriceLesserThanStopPrice;
        case 8: return CC_LastPriceLesserEqualStopPrice;
        case 9: return CC_AskPriceGreaterThanStopPrice;
        case 10: return CC_AskPriceGreaterEqualStopPrice;
        case 11: return CC_AskPriceLesserThanStopPrice;
        case 12: return CC_AskPriceLesserEqualStopPrice;
        case 13: return CC_BidPriceGreaterThanStopPrice;
        case 14: return CC_BidPriceGreaterEqualStopPrice;
        case 15: return CC_BidPriceLesserThanStopPrice;
        case 16: return CC_BidPriceLesserEqualStopPrice;
        case 17: return CC_LocalLastPriceLesserEqualStopPrice;
        case 18: return CC_LocalLastPriceGreaterEqualStopPrice;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ContingentConditionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ContingentConditionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ContingentConditionEnum>() {
            public ContingentConditionEnum findValueByNumber(int number) {
              return ContingentConditionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(22);
    }

    private static final ContingentConditionEnum[] VALUES = values();

    public static ContingentConditionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ContingentConditionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ContingentConditionEnum)
  }

  /**
   * <pre>
   * ActionFlagEnum是一个操作标志类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ActionFlagEnum}
   */
  public enum ActionFlagEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>AF_Unknown = 0;</code>
     */
    AF_Unknown(0),
    /**
     * <pre>
     * 删除
     * </pre>
     *
     * <code>AF_Delete = 1;</code>
     */
    AF_Delete(1),
    /**
     * <pre>
     * 修改
     * </pre>
     *
     * <code>AF_Modify = 2;</code>
     */
    AF_Modify(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>AF_Unknown = 0;</code>
     */
    public static final int AF_Unknown_VALUE = 0;
    /**
     * <pre>
     * 删除
     * </pre>
     *
     * <code>AF_Delete = 1;</code>
     */
    public static final int AF_Delete_VALUE = 1;
    /**
     * <pre>
     * 修改
     * </pre>
     *
     * <code>AF_Modify = 2;</code>
     */
    public static final int AF_Modify_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ActionFlagEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ActionFlagEnum forNumber(int value) {
      switch (value) {
        case 0: return AF_Unknown;
        case 1: return AF_Delete;
        case 2: return AF_Modify;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActionFlagEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ActionFlagEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActionFlagEnum>() {
            public ActionFlagEnum findValueByNumber(int number) {
              return ActionFlagEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(23);
    }

    private static final ActionFlagEnum[] VALUES = values();

    public static ActionFlagEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ActionFlagEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ActionFlagEnum)
  }

  /**
   * <pre>
   * TradingRightEnum是一个交易权限类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.TradingRightEnum}
   */
  public enum TradingRightEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TR_Unknown = 0;</code>
     */
    TR_Unknown(0),
    /**
     * <pre>
     * 可以交易
     * </pre>
     *
     * <code>TR_Allow = 1;</code>
     */
    TR_Allow(1),
    /**
     * <pre>
     * 只能平仓
     * </pre>
     *
     * <code>TR_CloseOnly = 2;</code>
     */
    TR_CloseOnly(2),
    /**
     * <pre>
     * 不能交易
     * </pre>
     *
     * <code>TR_Forbidden = 3;</code>
     */
    TR_Forbidden(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TR_Unknown = 0;</code>
     */
    public static final int TR_Unknown_VALUE = 0;
    /**
     * <pre>
     * 可以交易
     * </pre>
     *
     * <code>TR_Allow = 1;</code>
     */
    public static final int TR_Allow_VALUE = 1;
    /**
     * <pre>
     * 只能平仓
     * </pre>
     *
     * <code>TR_CloseOnly = 2;</code>
     */
    public static final int TR_CloseOnly_VALUE = 2;
    /**
     * <pre>
     * 不能交易
     * </pre>
     *
     * <code>TR_Forbidden = 3;</code>
     */
    public static final int TR_Forbidden_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TradingRightEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TradingRightEnum forNumber(int value) {
      switch (value) {
        case 0: return TR_Unknown;
        case 1: return TR_Allow;
        case 2: return TR_CloseOnly;
        case 3: return TR_Forbidden;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TradingRightEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TradingRightEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TradingRightEnum>() {
            public TradingRightEnum findValueByNumber(int number) {
              return TradingRightEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(24);
    }

    private static final TradingRightEnum[] VALUES = values();

    public static TradingRightEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TradingRightEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.TradingRightEnum)
  }

  /**
   * <pre>
   * OrderSourceEnum是一个报单来源类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OrderSourceEnum}
   */
  public enum OrderSourceEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ODS_Unknown = 0;</code>
     */
    ODS_Unknown(0),
    /**
     * <pre>
     * 来自参与者
     * </pre>
     *
     * <code>ODS_Participant = 1;</code>
     */
    ODS_Participant(1),
    /**
     * <pre>
     * 来自管理员
     * </pre>
     *
     * <code>ODS_Administrator = 2;</code>
     */
    ODS_Administrator(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ODS_Unknown = 0;</code>
     */
    public static final int ODS_Unknown_VALUE = 0;
    /**
     * <pre>
     * 来自参与者
     * </pre>
     *
     * <code>ODS_Participant = 1;</code>
     */
    public static final int ODS_Participant_VALUE = 1;
    /**
     * <pre>
     * 来自管理员
     * </pre>
     *
     * <code>ODS_Administrator = 2;</code>
     */
    public static final int ODS_Administrator_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderSourceEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderSourceEnum forNumber(int value) {
      switch (value) {
        case 0: return ODS_Unknown;
        case 1: return ODS_Participant;
        case 2: return ODS_Administrator;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderSourceEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderSourceEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderSourceEnum>() {
            public OrderSourceEnum findValueByNumber(int number) {
              return OrderSourceEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(25);
    }

    private static final OrderSourceEnum[] VALUES = values();

    public static OrderSourceEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderSourceEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OrderSourceEnum)
  }

  /**
   * <pre>
   * TradeTypeEnum是一个成交类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.TradeTypeEnum}
   */
  public enum TradeTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TT_Unknown = 0;</code>
     */
    TT_Unknown(0),
    /**
     * <pre>
     * 组合持仓拆分为单一持仓,初始化不应包含该类型的持仓
     * </pre>
     *
     * <code>TT_SplitCombination = 1;</code>
     */
    TT_SplitCombination(1),
    /**
     * <pre>
     * 普通成交
     * </pre>
     *
     * <code>TT_Common = 2;</code>
     */
    TT_Common(2),
    /**
     * <pre>
     * 期权执行
     * </pre>
     *
     * <code>TT_OptionsExecution = 3;</code>
     */
    TT_OptionsExecution(3),
    /**
     * <pre>
     * OTC成交 
     * </pre>
     *
     * <code>TT_OTC = 4;</code>
     */
    TT_OTC(4),
    /**
     * <pre>
     * 期转现衍生成交
     * </pre>
     *
     * <code>TT_EFPDerived = 5;</code>
     */
    TT_EFPDerived(5),
    /**
     * <pre>
     * 组合衍生成交
     * </pre>
     *
     * <code>TT_CombinationDerived = 6;</code>
     */
    TT_CombinationDerived(6),
    /**
     * <pre>
     * 大宗交易成交
     * </pre>
     *
     * <code>TT_BlockTrade = 7;</code>
     */
    TT_BlockTrade(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TT_Unknown = 0;</code>
     */
    public static final int TT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 组合持仓拆分为单一持仓,初始化不应包含该类型的持仓
     * </pre>
     *
     * <code>TT_SplitCombination = 1;</code>
     */
    public static final int TT_SplitCombination_VALUE = 1;
    /**
     * <pre>
     * 普通成交
     * </pre>
     *
     * <code>TT_Common = 2;</code>
     */
    public static final int TT_Common_VALUE = 2;
    /**
     * <pre>
     * 期权执行
     * </pre>
     *
     * <code>TT_OptionsExecution = 3;</code>
     */
    public static final int TT_OptionsExecution_VALUE = 3;
    /**
     * <pre>
     * OTC成交 
     * </pre>
     *
     * <code>TT_OTC = 4;</code>
     */
    public static final int TT_OTC_VALUE = 4;
    /**
     * <pre>
     * 期转现衍生成交
     * </pre>
     *
     * <code>TT_EFPDerived = 5;</code>
     */
    public static final int TT_EFPDerived_VALUE = 5;
    /**
     * <pre>
     * 组合衍生成交
     * </pre>
     *
     * <code>TT_CombinationDerived = 6;</code>
     */
    public static final int TT_CombinationDerived_VALUE = 6;
    /**
     * <pre>
     * 大宗交易成交
     * </pre>
     *
     * <code>TT_BlockTrade = 7;</code>
     */
    public static final int TT_BlockTrade_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TradeTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TradeTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return TT_Unknown;
        case 1: return TT_SplitCombination;
        case 2: return TT_Common;
        case 3: return TT_OptionsExecution;
        case 4: return TT_OTC;
        case 5: return TT_EFPDerived;
        case 6: return TT_CombinationDerived;
        case 7: return TT_BlockTrade;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TradeTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TradeTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TradeTypeEnum>() {
            public TradeTypeEnum findValueByNumber(int number) {
              return TradeTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(26);
    }

    private static final TradeTypeEnum[] VALUES = values();

    public static TradeTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TradeTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.TradeTypeEnum)
  }

  /**
   * <pre>
   * PriceSourceEnum是一个成交价来源类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.PriceSourceEnum}
   */
  public enum PriceSourceEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PSRC_Unknown = 0;</code>
     */
    PSRC_Unknown(0),
    /**
     * <pre>
     * 前成交价
     * </pre>
     *
     * <code>PSRC_LastPrice = 1;</code>
     */
    PSRC_LastPrice(1),
    /**
     * <pre>
     * 买委托价 
     * </pre>
     *
     * <code>PSRC_Buy = 2;</code>
     */
    PSRC_Buy(2),
    /**
     * <pre>
     * 卖委托价
     * </pre>
     *
     * <code>PSRC_Sell = 3;</code>
     */
    PSRC_Sell(3),
    /**
     * <pre>
     * 场外成交价
     * </pre>
     *
     * <code>PSRC_OTC = 4;</code>
     */
    PSRC_OTC(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PSRC_Unknown = 0;</code>
     */
    public static final int PSRC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 前成交价
     * </pre>
     *
     * <code>PSRC_LastPrice = 1;</code>
     */
    public static final int PSRC_LastPrice_VALUE = 1;
    /**
     * <pre>
     * 买委托价 
     * </pre>
     *
     * <code>PSRC_Buy = 2;</code>
     */
    public static final int PSRC_Buy_VALUE = 2;
    /**
     * <pre>
     * 卖委托价
     * </pre>
     *
     * <code>PSRC_Sell = 3;</code>
     */
    public static final int PSRC_Sell_VALUE = 3;
    /**
     * <pre>
     * 场外成交价
     * </pre>
     *
     * <code>PSRC_OTC = 4;</code>
     */
    public static final int PSRC_OTC_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PriceSourceEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PriceSourceEnum forNumber(int value) {
      switch (value) {
        case 0: return PSRC_Unknown;
        case 1: return PSRC_LastPrice;
        case 2: return PSRC_Buy;
        case 3: return PSRC_Sell;
        case 4: return PSRC_OTC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PriceSourceEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PriceSourceEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PriceSourceEnum>() {
            public PriceSourceEnum findValueByNumber(int number) {
              return PriceSourceEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(27);
    }

    private static final PriceSourceEnum[] VALUES = values();

    public static PriceSourceEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PriceSourceEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.PriceSourceEnum)
  }

  /**
   * <pre>
   * CurrencyEnum是一个货币类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.CurrencyEnum}
   */
  public enum CurrencyEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownCurrency = 0;</code>
     */
    UnknownCurrency(0),
    /**
     * <pre>
     * 美元
     * </pre>
     *
     * <code>USD = 1;</code>
     */
    USD(1),
    /**
     * <pre>
     * 人民币
     * </pre>
     *
     * <code>CNY = 2;</code>
     */
    CNY(2),
    /**
     * <pre>
     * 离岸人民币
     * </pre>
     *
     * <code>CNH = 3;</code>
     */
    CNH(3),
    /**
     * <pre>
     * 港币
     * </pre>
     *
     * <code>HKD = 4;</code>
     */
    HKD(4),
    /**
     * <pre>
     * 日元
     * </pre>
     *
     * <code>JPY = 5;</code>
     */
    JPY(5),
    /**
     * <pre>
     * 欧元
     * </pre>
     *
     * <code>EUR = 6;</code>
     */
    EUR(6),
    /**
     * <pre>
     * 英镑
     * </pre>
     *
     * <code>GBP = 7;</code>
     */
    GBP(7),
    /**
     * <pre>
     * 德国马克
     * </pre>
     *
     * <code>DEM = 8;</code>
     */
    DEM(8),
    /**
     * <pre>
     * 瑞士法郎
     * </pre>
     *
     * <code>CHF = 9;</code>
     */
    CHF(9),
    /**
     * <pre>
     * 法国法郎
     * </pre>
     *
     * <code>FRF = 10;</code>
     */
    FRF(10),
    /**
     * <pre>
     * 加拿大元
     * </pre>
     *
     * <code>CAD = 11;</code>
     */
    CAD(11),
    /**
     * <pre>
     * 澳大利亚元
     * </pre>
     *
     * <code>AUD = 12;</code>
     */
    AUD(12),
    /**
     * <pre>
     * 奥地利先令
     * </pre>
     *
     * <code>ATS = 13;</code>
     */
    ATS(13),
    /**
     * <pre>
     * 芬兰马克
     * </pre>
     *
     * <code>FIM = 14;</code>
     */
    FIM(14),
    /**
     * <pre>
     * 比利时法郎
     * </pre>
     *
     * <code>BEF = 15;</code>
     */
    BEF(15),
    /**
     * <pre>
     * 泰铢
     * </pre>
     *
     * <code>THB = 16;</code>
     */
    THB(16),
    /**
     * <pre>
     * 爱尔兰镑
     * </pre>
     *
     * <code>IEP = 17;</code>
     */
    IEP(17),
    /**
     * <pre>
     * 意大利里拉
     * </pre>
     *
     * <code>ITL = 18;</code>
     */
    ITL(18),
    /**
     * <pre>
     * 卢森堡法郎
     * </pre>
     *
     * <code>LUF = 19;</code>
     */
    LUF(19),
    /**
     * <pre>
     * 荷兰盾
     * </pre>
     *
     * <code>NLG = 20;</code>
     */
    NLG(20),
    /**
     * <pre>
     * 葡萄牙埃斯库多
     * </pre>
     *
     * <code>PTE = 21;</code>
     */
    PTE(21),
    /**
     * <pre>
     * 西班牙比塞塔
     * </pre>
     *
     * <code>ESP = 22;</code>
     */
    ESP(22),
    /**
     * <pre>
     * 印尼盾
     * </pre>
     *
     * <code>IDR = 23;</code>
     */
    IDR(23),
    /**
     * <pre>
     * 马来西亚林吉特
     * </pre>
     *
     * <code>MYR = 24;</code>
     */
    MYR(24),
    /**
     * <pre>
     * 新西兰元
     * </pre>
     *
     * <code>NZD = 25;</code>
     */
    NZD(25),
    /**
     * <pre>
     * 菲律宾比索
     * </pre>
     *
     * <code>PHP = 26;</code>
     */
    PHP(26),
    /**
     * <pre>
     * 俄罗斯卢布
     * </pre>
     *
     * <code>SUR = 27;</code>
     */
    SUR(27),
    /**
     * <pre>
     * 新加坡元
     * </pre>
     *
     * <code>SGD = 28;</code>
     */
    SGD(28),
    /**
     * <pre>
     * 韩国元
     * </pre>
     *
     * <code>KRW = 29;</code>
     */
    KRW(29),
    /**
     * <pre>
     * 美元稳定币
     * </pre>
     *
     * <code>USDT = 30;</code>
     */
    USDT(30),
    /**
     * <pre>
     * 币安稳定币
     * </pre>
     *
     * <code>BUSD = 31;</code>
     */
    BUSD(31),
    /**
     * <pre>
     * 去中心化稳定币
     * </pre>
     *
     * <code>USDC = 32;</code>
     */
    USDC(32),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownCurrency = 0;</code>
     */
    public static final int UnknownCurrency_VALUE = 0;
    /**
     * <pre>
     * 美元
     * </pre>
     *
     * <code>USD = 1;</code>
     */
    public static final int USD_VALUE = 1;
    /**
     * <pre>
     * 人民币
     * </pre>
     *
     * <code>CNY = 2;</code>
     */
    public static final int CNY_VALUE = 2;
    /**
     * <pre>
     * 离岸人民币
     * </pre>
     *
     * <code>CNH = 3;</code>
     */
    public static final int CNH_VALUE = 3;
    /**
     * <pre>
     * 港币
     * </pre>
     *
     * <code>HKD = 4;</code>
     */
    public static final int HKD_VALUE = 4;
    /**
     * <pre>
     * 日元
     * </pre>
     *
     * <code>JPY = 5;</code>
     */
    public static final int JPY_VALUE = 5;
    /**
     * <pre>
     * 欧元
     * </pre>
     *
     * <code>EUR = 6;</code>
     */
    public static final int EUR_VALUE = 6;
    /**
     * <pre>
     * 英镑
     * </pre>
     *
     * <code>GBP = 7;</code>
     */
    public static final int GBP_VALUE = 7;
    /**
     * <pre>
     * 德国马克
     * </pre>
     *
     * <code>DEM = 8;</code>
     */
    public static final int DEM_VALUE = 8;
    /**
     * <pre>
     * 瑞士法郎
     * </pre>
     *
     * <code>CHF = 9;</code>
     */
    public static final int CHF_VALUE = 9;
    /**
     * <pre>
     * 法国法郎
     * </pre>
     *
     * <code>FRF = 10;</code>
     */
    public static final int FRF_VALUE = 10;
    /**
     * <pre>
     * 加拿大元
     * </pre>
     *
     * <code>CAD = 11;</code>
     */
    public static final int CAD_VALUE = 11;
    /**
     * <pre>
     * 澳大利亚元
     * </pre>
     *
     * <code>AUD = 12;</code>
     */
    public static final int AUD_VALUE = 12;
    /**
     * <pre>
     * 奥地利先令
     * </pre>
     *
     * <code>ATS = 13;</code>
     */
    public static final int ATS_VALUE = 13;
    /**
     * <pre>
     * 芬兰马克
     * </pre>
     *
     * <code>FIM = 14;</code>
     */
    public static final int FIM_VALUE = 14;
    /**
     * <pre>
     * 比利时法郎
     * </pre>
     *
     * <code>BEF = 15;</code>
     */
    public static final int BEF_VALUE = 15;
    /**
     * <pre>
     * 泰铢
     * </pre>
     *
     * <code>THB = 16;</code>
     */
    public static final int THB_VALUE = 16;
    /**
     * <pre>
     * 爱尔兰镑
     * </pre>
     *
     * <code>IEP = 17;</code>
     */
    public static final int IEP_VALUE = 17;
    /**
     * <pre>
     * 意大利里拉
     * </pre>
     *
     * <code>ITL = 18;</code>
     */
    public static final int ITL_VALUE = 18;
    /**
     * <pre>
     * 卢森堡法郎
     * </pre>
     *
     * <code>LUF = 19;</code>
     */
    public static final int LUF_VALUE = 19;
    /**
     * <pre>
     * 荷兰盾
     * </pre>
     *
     * <code>NLG = 20;</code>
     */
    public static final int NLG_VALUE = 20;
    /**
     * <pre>
     * 葡萄牙埃斯库多
     * </pre>
     *
     * <code>PTE = 21;</code>
     */
    public static final int PTE_VALUE = 21;
    /**
     * <pre>
     * 西班牙比塞塔
     * </pre>
     *
     * <code>ESP = 22;</code>
     */
    public static final int ESP_VALUE = 22;
    /**
     * <pre>
     * 印尼盾
     * </pre>
     *
     * <code>IDR = 23;</code>
     */
    public static final int IDR_VALUE = 23;
    /**
     * <pre>
     * 马来西亚林吉特
     * </pre>
     *
     * <code>MYR = 24;</code>
     */
    public static final int MYR_VALUE = 24;
    /**
     * <pre>
     * 新西兰元
     * </pre>
     *
     * <code>NZD = 25;</code>
     */
    public static final int NZD_VALUE = 25;
    /**
     * <pre>
     * 菲律宾比索
     * </pre>
     *
     * <code>PHP = 26;</code>
     */
    public static final int PHP_VALUE = 26;
    /**
     * <pre>
     * 俄罗斯卢布
     * </pre>
     *
     * <code>SUR = 27;</code>
     */
    public static final int SUR_VALUE = 27;
    /**
     * <pre>
     * 新加坡元
     * </pre>
     *
     * <code>SGD = 28;</code>
     */
    public static final int SGD_VALUE = 28;
    /**
     * <pre>
     * 韩国元
     * </pre>
     *
     * <code>KRW = 29;</code>
     */
    public static final int KRW_VALUE = 29;
    /**
     * <pre>
     * 美元稳定币
     * </pre>
     *
     * <code>USDT = 30;</code>
     */
    public static final int USDT_VALUE = 30;
    /**
     * <pre>
     * 币安稳定币
     * </pre>
     *
     * <code>BUSD = 31;</code>
     */
    public static final int BUSD_VALUE = 31;
    /**
     * <pre>
     * 去中心化稳定币
     * </pre>
     *
     * <code>USDC = 32;</code>
     */
    public static final int USDC_VALUE = 32;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CurrencyEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CurrencyEnum forNumber(int value) {
      switch (value) {
        case 0: return UnknownCurrency;
        case 1: return USD;
        case 2: return CNY;
        case 3: return CNH;
        case 4: return HKD;
        case 5: return JPY;
        case 6: return EUR;
        case 7: return GBP;
        case 8: return DEM;
        case 9: return CHF;
        case 10: return FRF;
        case 11: return CAD;
        case 12: return AUD;
        case 13: return ATS;
        case 14: return FIM;
        case 15: return BEF;
        case 16: return THB;
        case 17: return IEP;
        case 18: return ITL;
        case 19: return LUF;
        case 20: return NLG;
        case 21: return PTE;
        case 22: return ESP;
        case 23: return IDR;
        case 24: return MYR;
        case 25: return NZD;
        case 26: return PHP;
        case 27: return SUR;
        case 28: return SGD;
        case 29: return KRW;
        case 30: return USDT;
        case 31: return BUSD;
        case 32: return USDC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CurrencyEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CurrencyEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CurrencyEnum>() {
            public CurrencyEnum findValueByNumber(int number) {
              return CurrencyEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(28);
    }

    private static final CurrencyEnum[] VALUES = values();

    public static CurrencyEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CurrencyEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.CurrencyEnum)
  }

  /**
   * <pre>
   * ExchangeEnum是一个交易所类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.ExchangeEnum}
   */
  public enum ExchangeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownExchange = 0;</code>
     */
    UnknownExchange(0),
    /**
     * <pre>
     * 上海证券交易所
     * </pre>
     *
     * <code>SSE = 1;</code>
     */
    SSE(1),
    /**
     * <pre>
     * 深圳证券交易所
     * </pre>
     *
     * <code>SZSE = 2;</code>
     */
    SZSE(2),
    /**
     * <pre>
     * 中国金融期货交易所
     * </pre>
     *
     * <code>CFFEX = 3;</code>
     */
    CFFEX(3),
    /**
     * <pre>
     * 上海期货交易所
     * </pre>
     *
     * <code>SHFE = 4;</code>
     */
    SHFE(4),
    /**
     * <pre>
     * 郑州商品交易所
     * </pre>
     *
     * <code>CZCE = 5;</code>
     */
    CZCE(5),
    /**
     * <pre>
     * 大连商品交易所
     * </pre>
     *
     * <code>DCE = 6;</code>
     */
    DCE(6),
    /**
     * <pre>
     * 上海黄金交易所
     * </pre>
     *
     * <code>SGE = 7;</code>
     */
    SGE(7),
    /**
     * <pre>
     * 上海国际能源交易中心
     * </pre>
     *
     * <code>INE = 8;</code>
     */
    INE(8),
    /**
     * <pre>
     * 香港联合交易所
     * </pre>
     *
     * <code>SEHK = 9;</code>
     */
    SEHK(9),
    /**
     * <pre>
     * 香港期货交易所
     * </pre>
     *
     * <code>HKFE = 10;</code>
     */
    HKFE(10),
    /**
     * <pre>
     * 新加坡证券交易所
     * </pre>
     *
     * <code>SGX = 11;</code>
     */
    SGX(11),
    /**
     * <pre>
     *纽约期货交易所
     * </pre>
     *
     * <code>NYBOT = 12;</code>
     */
    NYBOT(12),
    /**
     * <pre>
     * 纽约商业交易所
     * </pre>
     *
     * <code>NYMEX = 13;</code>
     */
    NYMEX(13),
    /**
     * <pre>
     * 纽约金属交易所
     * </pre>
     *
     * <code>COMEX = 14;</code>
     */
    COMEX(14),
    /**
     * <pre>
     * 芝加哥商业交易所
     * </pre>
     *
     * <code>CME = 15;</code>
     */
    CME(15),
    /**
     * <pre>
     * 芝加哥期权交易所期货交易分所
     * </pre>
     *
     * <code>CFE = 16;</code>
     */
    CFE(16),
    /**
     * <pre>
     * CME Globex
     * </pre>
     *
     * <code>GLOBEX = 17;</code>
     */
    GLOBEX(17),
    /**
     * <pre>
     * 美国洲际交易所
     * </pre>
     *
     * <code>ICE = 18;</code>
     */
    ICE(18),
    /**
     * <pre>
     * 伦敦国际石油交易所
     * </pre>
     *
     * <code>IPE = 19;</code>
     */
    IPE(19),
    /**
     * <pre>
     * 伦敦金属交易所
     * </pre>
     *
     * <code>LME = 20;</code>
     */
    LME(20),
    /**
     * <pre>
     * IDEALPRO（IB外汇）
     * </pre>
     *
     * <code>IDEALPRO = 21;</code>
     */
    IDEALPRO(21),
    /**
     * <pre>
     * OANDA外汇做市商
     * </pre>
     *
     * <code>OANDA = 22;</code>
     */
    OANDA(22),
    /**
     * <pre>
     * FXCM外汇做市商
     * </pre>
     *
     * <code>FXCM = 23;</code>
     */
    FXCM(23),
    /**
     * <pre>
     * IB智能路由
     * </pre>
     *
     * <code>SMART = 24;</code>
     */
    SMART(24),
    /**
     * <pre>
     * 广州期货交易所
     * </pre>
     *
     * <code>GFEX = 25;</code>
     */
    GFEX(25),
    /**
     * <pre>
     * 币安交易所
     * </pre>
     *
     * <code>BINANCE = 26;</code>
     */
    BINANCE(26),
    /**
     * <pre>
     * 欧易交易所
     * </pre>
     *
     * <code>OKX = 27;</code>
     */
    OKX(27),
    /**
     * <pre>
     * 芝麻开门交易所
     * </pre>
     *
     * <code>GATE = 28;</code>
     */
    GATE(28),
    /**
     * <pre>
     * 北京证券交易所
     * </pre>
     *
     * <code>BSE = 29;</code>
     */
    BSE(29),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownExchange = 0;</code>
     */
    public static final int UnknownExchange_VALUE = 0;
    /**
     * <pre>
     * 上海证券交易所
     * </pre>
     *
     * <code>SSE = 1;</code>
     */
    public static final int SSE_VALUE = 1;
    /**
     * <pre>
     * 深圳证券交易所
     * </pre>
     *
     * <code>SZSE = 2;</code>
     */
    public static final int SZSE_VALUE = 2;
    /**
     * <pre>
     * 中国金融期货交易所
     * </pre>
     *
     * <code>CFFEX = 3;</code>
     */
    public static final int CFFEX_VALUE = 3;
    /**
     * <pre>
     * 上海期货交易所
     * </pre>
     *
     * <code>SHFE = 4;</code>
     */
    public static final int SHFE_VALUE = 4;
    /**
     * <pre>
     * 郑州商品交易所
     * </pre>
     *
     * <code>CZCE = 5;</code>
     */
    public static final int CZCE_VALUE = 5;
    /**
     * <pre>
     * 大连商品交易所
     * </pre>
     *
     * <code>DCE = 6;</code>
     */
    public static final int DCE_VALUE = 6;
    /**
     * <pre>
     * 上海黄金交易所
     * </pre>
     *
     * <code>SGE = 7;</code>
     */
    public static final int SGE_VALUE = 7;
    /**
     * <pre>
     * 上海国际能源交易中心
     * </pre>
     *
     * <code>INE = 8;</code>
     */
    public static final int INE_VALUE = 8;
    /**
     * <pre>
     * 香港联合交易所
     * </pre>
     *
     * <code>SEHK = 9;</code>
     */
    public static final int SEHK_VALUE = 9;
    /**
     * <pre>
     * 香港期货交易所
     * </pre>
     *
     * <code>HKFE = 10;</code>
     */
    public static final int HKFE_VALUE = 10;
    /**
     * <pre>
     * 新加坡证券交易所
     * </pre>
     *
     * <code>SGX = 11;</code>
     */
    public static final int SGX_VALUE = 11;
    /**
     * <pre>
     *纽约期货交易所
     * </pre>
     *
     * <code>NYBOT = 12;</code>
     */
    public static final int NYBOT_VALUE = 12;
    /**
     * <pre>
     * 纽约商业交易所
     * </pre>
     *
     * <code>NYMEX = 13;</code>
     */
    public static final int NYMEX_VALUE = 13;
    /**
     * <pre>
     * 纽约金属交易所
     * </pre>
     *
     * <code>COMEX = 14;</code>
     */
    public static final int COMEX_VALUE = 14;
    /**
     * <pre>
     * 芝加哥商业交易所
     * </pre>
     *
     * <code>CME = 15;</code>
     */
    public static final int CME_VALUE = 15;
    /**
     * <pre>
     * 芝加哥期权交易所期货交易分所
     * </pre>
     *
     * <code>CFE = 16;</code>
     */
    public static final int CFE_VALUE = 16;
    /**
     * <pre>
     * CME Globex
     * </pre>
     *
     * <code>GLOBEX = 17;</code>
     */
    public static final int GLOBEX_VALUE = 17;
    /**
     * <pre>
     * 美国洲际交易所
     * </pre>
     *
     * <code>ICE = 18;</code>
     */
    public static final int ICE_VALUE = 18;
    /**
     * <pre>
     * 伦敦国际石油交易所
     * </pre>
     *
     * <code>IPE = 19;</code>
     */
    public static final int IPE_VALUE = 19;
    /**
     * <pre>
     * 伦敦金属交易所
     * </pre>
     *
     * <code>LME = 20;</code>
     */
    public static final int LME_VALUE = 20;
    /**
     * <pre>
     * IDEALPRO（IB外汇）
     * </pre>
     *
     * <code>IDEALPRO = 21;</code>
     */
    public static final int IDEALPRO_VALUE = 21;
    /**
     * <pre>
     * OANDA外汇做市商
     * </pre>
     *
     * <code>OANDA = 22;</code>
     */
    public static final int OANDA_VALUE = 22;
    /**
     * <pre>
     * FXCM外汇做市商
     * </pre>
     *
     * <code>FXCM = 23;</code>
     */
    public static final int FXCM_VALUE = 23;
    /**
     * <pre>
     * IB智能路由
     * </pre>
     *
     * <code>SMART = 24;</code>
     */
    public static final int SMART_VALUE = 24;
    /**
     * <pre>
     * 广州期货交易所
     * </pre>
     *
     * <code>GFEX = 25;</code>
     */
    public static final int GFEX_VALUE = 25;
    /**
     * <pre>
     * 币安交易所
     * </pre>
     *
     * <code>BINANCE = 26;</code>
     */
    public static final int BINANCE_VALUE = 26;
    /**
     * <pre>
     * 欧易交易所
     * </pre>
     *
     * <code>OKX = 27;</code>
     */
    public static final int OKX_VALUE = 27;
    /**
     * <pre>
     * 芝麻开门交易所
     * </pre>
     *
     * <code>GATE = 28;</code>
     */
    public static final int GATE_VALUE = 28;
    /**
     * <pre>
     * 北京证券交易所
     * </pre>
     *
     * <code>BSE = 29;</code>
     */
    public static final int BSE_VALUE = 29;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExchangeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ExchangeEnum forNumber(int value) {
      switch (value) {
        case 0: return UnknownExchange;
        case 1: return SSE;
        case 2: return SZSE;
        case 3: return CFFEX;
        case 4: return SHFE;
        case 5: return CZCE;
        case 6: return DCE;
        case 7: return SGE;
        case 8: return INE;
        case 9: return SEHK;
        case 10: return HKFE;
        case 11: return SGX;
        case 12: return NYBOT;
        case 13: return NYMEX;
        case 14: return COMEX;
        case 15: return CME;
        case 16: return CFE;
        case 17: return GLOBEX;
        case 18: return ICE;
        case 19: return IPE;
        case 20: return LME;
        case 21: return IDEALPRO;
        case 22: return OANDA;
        case 23: return FXCM;
        case 24: return SMART;
        case 25: return GFEX;
        case 26: return BINANCE;
        case 27: return OKX;
        case 28: return GATE;
        case 29: return BSE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExchangeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExchangeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExchangeEnum>() {
            public ExchangeEnum findValueByNumber(int number) {
              return ExchangeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(29);
    }

    private static final ExchangeEnum[] VALUES = values();

    public static ExchangeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExchangeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.ExchangeEnum)
  }

  /**
   * <pre>
   * OptionsTypeEnum是一个期权类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.OptionsTypeEnum}
   */
  public enum OptionsTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>O_Unknown = 0;</code>
     */
    O_Unknown(0),
    /**
     * <pre>
     * 看涨
     * </pre>
     *
     * <code>O_CallOptions = 1;</code>
     */
    O_CallOptions(1),
    /**
     * <pre>
     * 看跌
     * </pre>
     *
     * <code>O_PutOptions = 2;</code>
     */
    O_PutOptions(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>O_Unknown = 0;</code>
     */
    public static final int O_Unknown_VALUE = 0;
    /**
     * <pre>
     * 看涨
     * </pre>
     *
     * <code>O_CallOptions = 1;</code>
     */
    public static final int O_CallOptions_VALUE = 1;
    /**
     * <pre>
     * 看跌
     * </pre>
     *
     * <code>O_PutOptions = 2;</code>
     */
    public static final int O_PutOptions_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OptionsTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OptionsTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return O_Unknown;
        case 1: return O_CallOptions;
        case 2: return O_PutOptions;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OptionsTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OptionsTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OptionsTypeEnum>() {
            public OptionsTypeEnum findValueByNumber(int number) {
              return OptionsTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(30);
    }

    private static final OptionsTypeEnum[] VALUES = values();

    public static OptionsTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OptionsTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.OptionsTypeEnum)
  }

  /**
   * <pre>
   * StrikeModeEnum是一个执行方式类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.StrikeModeEnum}
   */
  public enum StrikeModeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>STM_Unknown = 0;</code>
     */
    STM_Unknown(0),
    /**
     * <pre>
     * 欧式
     * </pre>
     *
     * <code>STM_Continental = 1;</code>
     */
    STM_Continental(1),
    /**
     * <pre>
     * 美式
     * </pre>
     *
     * <code>STM_American = 2;</code>
     */
    STM_American(2),
    /**
     * <pre>
     * 百慕大
     * </pre>
     *
     * <code>STM_Bermuda = 3;</code>
     */
    STM_Bermuda(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>STM_Unknown = 0;</code>
     */
    public static final int STM_Unknown_VALUE = 0;
    /**
     * <pre>
     * 欧式
     * </pre>
     *
     * <code>STM_Continental = 1;</code>
     */
    public static final int STM_Continental_VALUE = 1;
    /**
     * <pre>
     * 美式
     * </pre>
     *
     * <code>STM_American = 2;</code>
     */
    public static final int STM_American_VALUE = 2;
    /**
     * <pre>
     * 百慕大
     * </pre>
     *
     * <code>STM_Bermuda = 3;</code>
     */
    public static final int STM_Bermuda_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StrikeModeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static StrikeModeEnum forNumber(int value) {
      switch (value) {
        case 0: return STM_Unknown;
        case 1: return STM_Continental;
        case 2: return STM_American;
        case 3: return STM_Bermuda;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StrikeModeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StrikeModeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StrikeModeEnum>() {
            public StrikeModeEnum findValueByNumber(int number) {
              return StrikeModeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(31);
    }

    private static final StrikeModeEnum[] VALUES = values();

    public static StrikeModeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StrikeModeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.StrikeModeEnum)
  }

  /**
   * <pre>
   * CombinationTypeEnum是一个组合类型类型
   * </pre>
   *
   * Protobuf enum {@code xyz.redtorch.pb.CombinationTypeEnum}
   */
  public enum CombinationTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>COMBT_Unknown = 0;</code>
     */
    COMBT_Unknown(0),
    /**
     * <pre>
     * 期货组合
     * </pre>
     *
     * <code>COMBT_Future = 1;</code>
     */
    COMBT_Future(1),
    /**
     * <pre>
     * 垂直价差BUL
     * </pre>
     *
     * <code>COMBT_BUL = 2;</code>
     */
    COMBT_BUL(2),
    /**
     * <pre>
     * 垂直价差BER
     * </pre>
     *
     * <code>COMBT_BER = 3;</code>
     */
    COMBT_BER(3),
    /**
     * <pre>
     * 跨式组合
     * </pre>
     *
     * <code>COMBT_STD = 4;</code>
     */
    COMBT_STD(4),
    /**
     * <pre>
     * 宽跨式组合
     * </pre>
     *
     * <code>COMBT_STG = 5;</code>
     */
    COMBT_STG(5),
    /**
     * <pre>
     * 备兑组合
     * </pre>
     *
     * <code>COMBT_PRT = 6;</code>
     */
    COMBT_PRT(6),
    /**
     * <pre>
     * 时间价差组合
     * </pre>
     *
     * <code>COMBT_CLD = 7;</code>
     */
    COMBT_CLD(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>COMBT_Unknown = 0;</code>
     */
    public static final int COMBT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 期货组合
     * </pre>
     *
     * <code>COMBT_Future = 1;</code>
     */
    public static final int COMBT_Future_VALUE = 1;
    /**
     * <pre>
     * 垂直价差BUL
     * </pre>
     *
     * <code>COMBT_BUL = 2;</code>
     */
    public static final int COMBT_BUL_VALUE = 2;
    /**
     * <pre>
     * 垂直价差BER
     * </pre>
     *
     * <code>COMBT_BER = 3;</code>
     */
    public static final int COMBT_BER_VALUE = 3;
    /**
     * <pre>
     * 跨式组合
     * </pre>
     *
     * <code>COMBT_STD = 4;</code>
     */
    public static final int COMBT_STD_VALUE = 4;
    /**
     * <pre>
     * 宽跨式组合
     * </pre>
     *
     * <code>COMBT_STG = 5;</code>
     */
    public static final int COMBT_STG_VALUE = 5;
    /**
     * <pre>
     * 备兑组合
     * </pre>
     *
     * <code>COMBT_PRT = 6;</code>
     */
    public static final int COMBT_PRT_VALUE = 6;
    /**
     * <pre>
     * 时间价差组合
     * </pre>
     *
     * <code>COMBT_CLD = 7;</code>
     */
    public static final int COMBT_CLD_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CombinationTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CombinationTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return COMBT_Unknown;
        case 1: return COMBT_Future;
        case 2: return COMBT_BUL;
        case 3: return COMBT_BER;
        case 4: return COMBT_STD;
        case 5: return COMBT_STG;
        case 6: return COMBT_PRT;
        case 7: return COMBT_CLD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CombinationTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CombinationTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CombinationTypeEnum>() {
            public CombinationTypeEnum findValueByNumber(int number) {
              return CombinationTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return xyz.redtorch.pb.CoreEnum.getDescriptor().getEnumTypes().get(32);
    }

    private static final CombinationTypeEnum[] VALUES = values();

    public static CombinationTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CombinationTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:xyz.redtorch.pb.CombinationTypeEnum)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037xyz/redtorch/pb/core_enum.proto\022\017xyz.r" +
      "edtorch.pb*?\n\026StrategyEngineTypeEnum\022\020\n\014" +
      "SET_Treading\020\000\022\023\n\017SET_Backtesting\020\001*P\n\017G" +
      "atewayTypeEnum\022\032\n\026GTE_TradeAndMarketData" +
      "\020\000\022\022\n\016GTE_MarketData\020\001\022\r\n\tGTE_Trade\020\002*1\n" +
      "\026GatewayAdapterTypeEnum\022\013\n\007GAT_CTP\020\000\022\n\n\006" +
      "GAT_IB\020\001*R\n\020CommonStatusEnum\022\020\n\014COMS_SUC" +
      "CESS\020\000\022\r\n\tCOMS_INFO\020\001\022\r\n\tCOMS_WARN\020\002\022\016\n\n" +
      "COMS_ERROR\020\003*f\n\014LogLevelEnum\022\n\n\006LL_All\020\000" +
      "\022\016\n\010LL_Error\020\300\270\002\022\r\n\007LL_Warn\020\260\352\001\022\r\n\007LL_In" +
      "fo\020\240\234\001\022\r\n\010LL_Debug\020\220N\022\r\n\010LL_Trace\020\210\'*@\n\024" +
      "MarketDataDBTypeEnum\022\014\n\010MDDT_MIX\020\000\022\013\n\007MD" +
      "DT_TD\020\001\022\r\n\tMDDT_HIST\020\002*W\n\014BarCycleEnum\022\n" +
      "\n\006B_5Sec\020\000\022\n\n\006B_1Min\020\001\022\n\n\006B_3Min\020\002\022\n\n\006B_" +
      "5Min\020\003\022\013\n\007B_15Min\020\004\022\n\n\006B_1Day\020\005*s\n\021Conne" +
      "ctStatusEnum\022\016\n\nCS_Unknown\020\000\022\023\n\017CS_Disco" +
      "nnected\020\001\022\020\n\014CS_Connected\020\002\022\024\n\020CS_Discon" +
      "necting\020\003\022\021\n\rCS_Connecting\020\004*^\n\024OrderAct" +
      "ionStatusTyp\022\017\n\013OAS_Unknown\020\000\022\021\n\rOAS_Sub" +
      "mitted\020\001\022\020\n\014OAS_Accepted\020\002\022\020\n\014OAS_Reject" +
      "ed\020\003*\344\001\n\017OrderStatusEnum\022\016\n\nOS_Unknown\020\000" +
      "\022\020\n\014OS_AllTraded\020\001\022\031\n\025OS_PartTradedQueue" +
      "ing\020\002\022\034\n\030OS_PartTradedNotQueueing\020\003\022\026\n\022O" +
      "S_NoTradeQueueing\020\004\022\031\n\025OS_NoTradeNotQueu" +
      "eing\020\005\022\017\n\013OS_Canceled\020\006\022\021\n\rOS_NotTouched" +
      "\020\007\022\016\n\nOS_Touched\020\010\022\017\n\013OS_Rejected\020\t*\315\001\n\025" +
      "OrderSubmitStatusEnum\022\017\n\013OSS_Unknown\020\000\022\027" +
      "\n\023OSS_InsertSubmitted\020\001\022\027\n\023OSS_CancelSub" +
      "mitted\020\002\022\027\n\023OSS_ModifySubmitted\020\003\022\020\n\014OSS" +
      "_Accepted\020\004\022\026\n\022OSS_InsertRejected\020\005\022\026\n\022O" +
      "SS_CancelRejected\020\006\022\026\n\022OSS_ModifyRejecte" +
      "d\020\007*\362\001\n\020ProductClassEnum\022\027\n\023UnknownProdu" +
      "ctClass\020\000\022\n\n\006EQUITY\020\001\022\013\n\007FUTURES\020\002\022\n\n\006OP" +
      "TION\020\003\022\t\n\005INDEX\020\004\022\017\n\013COMBINATION\020\005\022\010\n\004BO" +
      "ND\020\006\022\t\n\005FOREX\020\007\022\010\n\004SPOT\020\010\022\t\n\005DEFER\020\t\022\007\n\003" +
      "ETF\020\n\022\014\n\010WARRANTS\020\013\022\n\n\006SPREAD\020\014\022\010\n\004FUND\020" +
      "\r\022\007\n\003EFP\020\016\022\016\n\nSPOTOPTION\020\017\022\n\n\006MARGIN\020\020\022\010" +
      "\n\004SWAP\020\021*5\n\rDirectionEnum\022\r\n\tD_Unknown\020\000" +
      "\022\t\n\005D_Buy\020\001\022\n\n\006D_Sell\020\002*<\n\020PositionTypeE" +
      "num\022\016\n\nPT_Unknown\020\000\022\n\n\006PT_Net\020\001\022\014\n\010PT_Gr" +
      "oss\020\002*N\n\025PositionDirectionEnum\022\016\n\nPD_Unk" +
      "nown\020\000\022\n\n\006PD_Net\020\001\022\013\n\007PD_Long\020\002\022\014\n\010PD_Sh" +
      "ort\020\003*\213\001\n\rHedgeFlagEnum\022\016\n\nHF_Unknown\020\000\022" +
      "\022\n\016HF_Speculation\020\001\022\020\n\014HF_Arbitrage\020\002\022\014\n" +
      "\010HF_Hedge\020\003\022\022\n\016HF_MarketMaker\020\004\022\020\n\014HF_Sp" +
      "ecHedge\020\005\022\020\n\014HF_HedgeSpec\020\006*\314\003\n\022OrderPri" +
      "ceTypeEnum\022\017\n\013OPT_Unknown\020\000\022\020\n\014OPT_AnyPr" +
      "ice\020\001\022\022\n\016OPT_LimitPrice\020\002\022\021\n\rOPT_BestPri" +
      "ce\020\003\022\021\n\rOPT_LastPrice\020\004\022\035\n\031OPT_LastPrice" +
      "PlusOneTicks\020\005\022\035\n\031OPT_LastPricePlusTwoTi" +
      "cks\020\006\022\037\n\033OPT_LastPricePlusThreeTicks\020\007\022\021" +
      "\n\rOPT_AskPrice1\020\010\022\035\n\031OPT_AskPrice1PlusOn" +
      "eTicks\020\t\022\035\n\031OPT_AskPrice1PlusTwoTicks\020\n\022" +
      "\037\n\033OPT_AskPrice1PlusThreeTicks\020\013\022\021\n\rOPT_" +
      "BidPrice1\020\014\022\035\n\031OPT_BidPrice1PlusOneTicks" +
      "\020\r\022\035\n\031OPT_BidPrice1PlusTwoTicks\020\016\022\037\n\033OPT" +
      "_BidPrice1PlusThreeTicks\020\017\022\026\n\022OPT_FiveLe" +
      "velPrice\020\020*\241\001\n\016OffsetFlagEnum\022\016\n\nOF_Unkn" +
      "own\020\000\022\013\n\007OF_Open\020\001\022\014\n\010OF_Close\020\002\022\021\n\rOF_F" +
      "orceClose\020\003\022\021\n\rOF_CloseToday\020\004\022\025\n\021OF_Clo" +
      "seYesterday\020\005\022\017\n\013OF_ForceOff\020\006\022\026\n\022OF_Loc" +
      "alForceClose\020\007*\343\001\n\024ForceCloseReasonEnum\022" +
      "\017\n\013FCR_Unknown\020\000\022\025\n\021FCR_NotForceClose\020\001\022" +
      "\023\n\017FCR_LackDeposit\020\002\022\037\n\033FCR_ClientOverPo" +
      "sitionLimit\020\003\022\037\n\033FCR_MemberOverPositionL" +
      "imit\020\004\022\023\n\017FCR_NotMultiple\020\005\022\021\n\rFCR_Viola" +
      "tion\020\006\022\r\n\tFCR_Other\020\007\022\025\n\021FCR_PersonDeliv" +
      "er\020\010*\236\001\n\rOrderTypeEnum\022\016\n\nOT_Unknown\020\000\022\r" +
      "\n\tOT_Normal\020\001\022\026\n\022OT_DeriveFromQuote\020\002\022\034\n" +
      "\030OT_DeriveFromCombination\020\003\022\022\n\016OT_Combin" +
      "ation\020\004\022\027\n\023OT_ConditionalOrder\020\005\022\013\n\007OT_S" +
      "wap\020\006*k\n\021TimeConditionEnum\022\016\n\nTC_Unknown" +
      "\020\000\022\n\n\006TC_IOC\020\001\022\n\n\006TC_GFS\020\002\022\n\n\006TC_GFD\020\003\022\n" +
      "\n\006TC_GTD\020\004\022\n\n\006TC_GTC\020\005\022\n\n\006TC_GFA\020\006*F\n\023Vo" +
      "lumeConditionEnum\022\016\n\nVC_Unknown\020\000\022\t\n\005VC_" +
      "AV\020\001\022\t\n\005VC_MV\020\002\022\t\n\005VC_CV\020\003*\212\005\n\027Contingen" +
      "tConditionEnum\022\016\n\nCC_Unknown\020\000\022\022\n\016CC_Imm" +
      "ediately\020\001\022\014\n\010CC_Touch\020\002\022\022\n\016CC_TouchProf" +
      "it\020\003\022\022\n\016CC_ParkedOrder\020\004\022$\n CC_LastPrice" +
      "GreaterThanStopPrice\020\005\022%\n!CC_LastPriceGr" +
      "eaterEqualStopPrice\020\006\022#\n\037CC_LastPriceLes" +
      "serThanStopPrice\020\007\022$\n CC_LastPriceLesser" +
      "EqualStopPrice\020\010\022#\n\037CC_AskPriceGreaterTh" +
      "anStopPrice\020\t\022$\n CC_AskPriceGreaterEqual" +
      "StopPrice\020\n\022\"\n\036CC_AskPriceLesserThanStop" +
      "Price\020\013\022#\n\037CC_AskPriceLesserEqualStopPri" +
      "ce\020\014\022#\n\037CC_BidPriceGreaterThanStopPrice\020" +
      "\r\022$\n CC_BidPriceGreaterEqualStopPrice\020\016\022" +
      "\"\n\036CC_BidPriceLesserThanStopPrice\020\017\022#\n\037C" +
      "C_BidPriceLesserEqualStopPrice\020\020\022)\n%CC_L" +
      "ocalLastPriceLesserEqualStopPrice\020\021\022*\n&C" +
      "C_LocalLastPriceGreaterEqualStopPrice\020\022*" +
      ">\n\016ActionFlagEnum\022\016\n\nAF_Unknown\020\000\022\r\n\tAF_" +
      "Delete\020\001\022\r\n\tAF_Modify\020\002*T\n\020TradingRightE" +
      "num\022\016\n\nTR_Unknown\020\000\022\014\n\010TR_Allow\020\001\022\020\n\014TR_" +
      "CloseOnly\020\002\022\020\n\014TR_Forbidden\020\003*N\n\017OrderSo" +
      "urceEnum\022\017\n\013ODS_Unknown\020\000\022\023\n\017ODS_Partici" +
      "pant\020\001\022\025\n\021ODS_Administrator\020\002*\255\001\n\rTradeT" +
      "ypeEnum\022\016\n\nTT_Unknown\020\000\022\027\n\023TT_SplitCombi" +
      "nation\020\001\022\r\n\tTT_Common\020\002\022\027\n\023TT_OptionsExe" +
      "cution\020\003\022\n\n\006TT_OTC\020\004\022\021\n\rTT_EFPDerived\020\005\022" +
      "\031\n\025TT_CombinationDerived\020\006\022\021\n\rTT_BlockTr" +
      "ade\020\007*b\n\017PriceSourceEnum\022\020\n\014PSRC_Unknown" +
      "\020\000\022\022\n\016PSRC_LastPrice\020\001\022\014\n\010PSRC_Buy\020\002\022\r\n\t" +
      "PSRC_Sell\020\003\022\014\n\010PSRC_OTC\020\004*\306\002\n\014CurrencyEn" +
      "um\022\023\n\017UnknownCurrency\020\000\022\007\n\003USD\020\001\022\007\n\003CNY\020" +
      "\002\022\007\n\003CNH\020\003\022\007\n\003HKD\020\004\022\007\n\003JPY\020\005\022\007\n\003EUR\020\006\022\007\n" +
      "\003GBP\020\007\022\007\n\003DEM\020\010\022\007\n\003CHF\020\t\022\007\n\003FRF\020\n\022\007\n\003CAD" +
      "\020\013\022\007\n\003AUD\020\014\022\007\n\003ATS\020\r\022\007\n\003FIM\020\016\022\007\n\003BEF\020\017\022\007" +
      "\n\003THB\020\020\022\007\n\003IEP\020\021\022\007\n\003ITL\020\022\022\007\n\003LUF\020\023\022\007\n\003NL" +
      "G\020\024\022\007\n\003PTE\020\025\022\007\n\003ESP\020\026\022\007\n\003IDR\020\027\022\007\n\003MYR\020\030\022" +
      "\007\n\003NZD\020\031\022\007\n\003PHP\020\032\022\007\n\003SUR\020\033\022\007\n\003SGD\020\034\022\007\n\003K" +
      "RW\020\035\022\010\n\004USDT\020\036\022\010\n\004BUSD\020\037\022\010\n\004USDC\020 *\310\002\n\014E" +
      "xchangeEnum\022\023\n\017UnknownExchange\020\000\022\007\n\003SSE\020" +
      "\001\022\010\n\004SZSE\020\002\022\t\n\005CFFEX\020\003\022\010\n\004SHFE\020\004\022\010\n\004CZCE" +
      "\020\005\022\007\n\003DCE\020\006\022\007\n\003SGE\020\007\022\007\n\003INE\020\010\022\010\n\004SEHK\020\t\022" +
      "\010\n\004HKFE\020\n\022\007\n\003SGX\020\013\022\t\n\005NYBOT\020\014\022\t\n\005NYMEX\020\r" +
      "\022\t\n\005COMEX\020\016\022\007\n\003CME\020\017\022\007\n\003CFE\020\020\022\n\n\006GLOBEX\020" +
      "\021\022\007\n\003ICE\020\022\022\007\n\003IPE\020\023\022\007\n\003LME\020\024\022\014\n\010IDEALPRO" +
      "\020\025\022\t\n\005OANDA\020\026\022\010\n\004FXCM\020\027\022\t\n\005SMART\020\030\022\010\n\004GF" +
      "EX\020\031\022\013\n\007BINANCE\020\032\022\007\n\003OKX\020\033\022\010\n\004GATE\020\034\022\007\n\003" +
      "BSE\020\035*E\n\017OptionsTypeEnum\022\r\n\tO_Unknown\020\000\022" +
      "\021\n\rO_CallOptions\020\001\022\020\n\014O_PutOptions\020\002*Y\n\016" +
      "StrikeModeEnum\022\017\n\013STM_Unknown\020\000\022\023\n\017STM_C" +
      "ontinental\020\001\022\020\n\014STM_American\020\002\022\017\n\013STM_Be" +
      "rmuda\020\003*\224\001\n\023CombinationTypeEnum\022\021\n\rCOMBT" +
      "_Unknown\020\000\022\020\n\014COMBT_Future\020\001\022\r\n\tCOMBT_BU" +
      "L\020\002\022\r\n\tCOMBT_BER\020\003\022\r\n\tCOMBT_STD\020\004\022\r\n\tCOM" +
      "BT_STG\020\005\022\r\n\tCOMBT_PRT\020\006\022\r\n\tCOMBT_CLD\020\007b\006" +
      "proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
